Problem Statement

Evirir the dragon snuck into a wizard's castle and found a mysterious contraption, and their playful instincts caused them to play with (destroy) it...
Evirir the dragon found an array a 1 , a 2 ,…, a n of n non-negative integers.
In one operation, they can choose a non-empty subarray ∗ b of a and replace it with the integer mex(b) † † . They want to use this operation any number of times to make a only contain zeros. It can be proven that this is always possible under the problem constraints.
What is the minimum number of operations needed?
∗ An array c is a subarray of an array d if c can be obtained from d by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. † † The minimum excluded (MEX) of a collection of integers f 1 , f 2 ,…, f k is defined as the smallest non-negative integer x which does not occur in the collection f .

Footnote
∗ An array c is a subarray of an array d if c can be obtained from d by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.
† † The minimum excluded (MEX) of a collection of integers f 1 , f 2 ,…, f k is defined as the smallest non-negative integer x which does not occur in the collection f .

Input
Input
Each test contains multiple test cases. The first line contains the number of test cases t ( 1≤t≤200 ). The description of the test cases follows.
The first line of each test case contains a single integer n ( 1≤n≤50 ), the length of a .
The second line of each test case contains n space-separated integers, a 1 , a 2 ,…, a n ( 0≤ a i ≤100 ).
It is guaranteed that the sum of n over all test cases does not exceed 500 .

Output
Output
For each test case, output a single integer on a line, the minimum number of operations needed to make a contain only zeros.

Example
[{'input': ['4', '0 1 2 3'], 'output': '1'}, {'input': ['6', '0 0 0 0 0 0'], 'output': '0'}, {'input': ['5', '1 0 1 0 1'], 'output': '2'}, {'input': ['5', '3 1 4 1 5'], 'output': '1'}, {'input': ['4', '3 2 1 0'], 'output': '1'}, {'input': ['7', '9 100 0 89 12 2 3'], 'output': '2'}, {'input': ['4', '0 3 9 0'], 'output': '1'}, {'input': ['7', '0 7 0 2 0 7 0'], 'output': '2'}, {'input': ['1', '0'], 'output': '0'}, {'input': ['2', '0 1'], 'output': '1'}]

Note
Note
In the first test case, Evirir can choose the subarray b=[1,2,3] and replace it with mex(1,2,3)=0 , changing a from [0, 1,2,3 – – – – – – ] to [0,0] (where the chosen subarray is underlined). Therefore, the answer is 1 .
In the second test case, a already contains only 0 s, so no operation is needed.
In the third test case, Evirir can change a as follows: [1, 0,1,0,1 – – – – – – – – ]→[ 1,2 – – – – ]→[0] . Here, mex(0,1,0,1)=2 and mex(1,2)=0 .
In the fourth test case, Evirir can choose b to be the entire array a , changing a from [ 3,1,4,1,5 – – – – – – – – – – ] to [0] .