Problem Statement

Cats are attracted to pspspsps, but Evirir, being a dignified dragon, is only attracted to pspspsps with oddly specific requirements...
Given a string s= s 1 s 2 … s n of length n consisting of characters p, s, and . (dot), determine whether a permutation ∗ p of length n exists, such that for all integers i ( 1≤i≤n ):
- If s i is p, then [ p 1 , p 2 ,…, p i ] forms a permutation (of length i );
- If s i is s, then [ p i , p i+1 ,…, p n ] forms a permutation (of length n−i+1 );
- If s i is ., then there is no additional restriction.
∗ A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation ( 2 appears twice in the array), and [1,3,4] is also not a permutation ( n=3 but there is 4 in the array).

Footnote
∗ A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation ( 2 appears twice in the array), and [1,3,4] is also not a permutation ( n=3 but there is 4 in the array).

Input
Input
Each test contains multiple test cases. The first line contains the number of test cases t ( 1≤t≤ 10 4 ). The description of the test cases follows.
The first line of each test case contains a single integer n ( 1≤n≤500 ), the length of s .
The second line of each test case contains a string s of length n that consists of the characters p, s, and ..
It is guaranteed that the sum of n over all test cases does not exceed 5000 .

Output
Output
For each test case, output YES or NO on a line. Output YES if there is such a permutation and NO otherwise.
You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.

Example
[{'input': ['4', 's.sp'], 'output': 'YES'}, {'input': ['6', 'pss..s'], 'output': 'NO'}, {'input': ['5', 'ppppp'], 'output': 'YES'}, {'input': ['2', 'sp'], 'output': 'YES'}, {'input': ['4', '.sp.'], 'output': 'NO'}, {'input': ['8', 'psss....'], 'output': 'NO'}, {'input': ['1', '.'], 'output': 'YES'}, {'input': ['8', 'pspspsps'], 'output': 'NO'}, {'input': ['20', '....................'], 'output': 'YES'}]

Note
Note
For the first test case, one permutation that works is p=[3,4,1,2] . The restrictions are as follows:
- s 1 = s: [ p 1 , p 2 , p 3 , p 4 ]=[3,4,1,2] forms a permutation.
- s 2 = .: No additional restriction.
- s 3 = s: [ p 3 , p 4 ]=[1,2] forms a permutation.
- s 4 = p: [ p 1 , p 2 , p 3 , p 4 ]=[3,4,1,2] forms a permutation.
For the second test case, it can be proven that there is no permutation that satisfies all restrictions.
For the third test case, one permutation that satisfies the constraints is p=[1,2,3,4,5] .