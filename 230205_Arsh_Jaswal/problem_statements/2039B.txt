Problem Title: B. Shohag Loves Strings

time limit per test1 second
memory limit per test256 megabytes

For a string pp, let f(p)f(p) be the number of distinct non-empty substrings∗∗ of pp.
Shohag has a string ss. Help him find a non-empty string pp such that pp is a substring of ss and f(p)f(p) is even or state that no such string exists.
∗∗A string aa is a substring of a string bb if aa can be obtained from bb by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.
The first line contains a single integer tt (1≤t≤1041≤t≤104) — the number of test cases.
The first and only line of each test case contains a string ss (1≤|s|≤1051≤|s|≤105) consisting of lowercase English letters.
It is guaranteed that the sum of the length of ss over all test cases doesn't exceed 3⋅1053⋅105.
For each test case, print a non-empty string that satisfies the conditions mentioned in the statement, or −1−1 if no such string exists. If there are multiple solutions, output any.
In the first test case, we can set p=p= abaa because it is a substring of ss and the distinct non-empty substrings of pp are a, b, aa, ab, ba, aba, baa and abaa, so it has a total of 88 distinct substrings which is even.
In the second test case, we can only set p=p= a but it has one distinct non-empty substring but this number is odd, so not valid.
In the third test case, the whole string contains 5252 distinct non-empty substrings, so the string itself is a valid solution.