Problem Title: B. Equal XOR

time limit per test1 second
memory limit per test256 megabytes

You are given an array a of length 2n, consisting of each integer from 1 to n exactly twice.
You are also given an integer k (1≤k≤⌊n2⌋).
You need to find two arrays l and r each of length 2k such that: 
It can be proved that at least one pair of l and r always exists. If there are multiple solutions, you may output any one of them.
† A sequence x is a subset of a sequence y if x can be obtained by deleting several (possibly none or all) elements of y and rearranging the elements in any order. For example, [3,1,2,1], [1,2,3], [1,1] and [3,2] are subsets of [1,1,2,3] but [4] and [2,2] are not subsets of [1,1,2,3].
Each test contains multiple test cases. The first line contains a single integer t (1≤t≤5000) — the number of test cases. The description of the test cases follows.
The first line of each test case contains 2 integers n and k (2≤n≤5⋅104, 1≤k≤⌊n2⌋).
The second line contains 2n integers a1,a2,…,a2n (1≤ai≤n). It is guaranteed that every integer from 1 to n occurs exactly twice in a.
It is guaranteed that the sum of n over all test cases does not exceed 5⋅104.
For each test case, output two lines. 
On the first line of output, output 2k integers l1,l2,…,l2k.
On the second line of output, output 2k integers r1,r2,…r2k.
If there are multiple solutions, you may output any one of them.
In the first test case, we choose l=[2,1] and r=[2,1]. [2,1] is a subset of [a1,a2] and [2,1] is a subset of [a3,a4], and 2⊕1=2⊕1=3.
In the second test case, 6⊕4=1⊕3=2.