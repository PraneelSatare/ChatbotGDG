{
    "title": "B. Good String",
    "description": "You have a string s of length n consisting of only characters > and <. You may do some operations with this string, for each operation you have to choose some character that still remains in the string. If you choose a character >, the character that comes right after it is deleted (if the character you chose was the last one, nothing happens). If you choose a character <, the character that comes right before it is deleted (if the character you chose was the first one, nothing happens).\nFor example, if we choose character > in string > > < >, the string will become to > > >. And if we choose character < in string > <, the string will become to <.\nThe string is good if there is a sequence of operations such that after performing it only one character will remain in the string. For example, the strings >, > > are good. \nBefore applying the operations, you may remove any number of characters from the given string (possibly none, possibly up to n−1, but not the whole string). You need to calculate the minimum number of characters to be deleted from string s so that it becomes good.\nThe first line contains one integer t (1≤t≤100) – the number of test cases. Each test case is represented by two lines.\nThe first line of i-th test case contains one integer n (1≤n≤100) – the length of string s.\nThe second line of i-th test case contains string s, consisting of only characters > and <.\nFor each test case print one line.\nFor i-th test case print the minimum number of characters to be deleted from string s so that it becomes good.\nIn the first test case we can delete any character in string <>.\nIn the second test case we don't need to delete any characters. The string > < < is good, because we can perform the following sequence of operations: > < < → < < → <.",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "implementation",
        "strings",
        "*1200"
    ]
}