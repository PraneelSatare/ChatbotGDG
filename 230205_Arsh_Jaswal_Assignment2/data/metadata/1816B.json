{
    "title": "B. Grid Reconstruction",
    "description": "Consider a 2×n2×n grid, where nn is an even integer. You may place the integers 1,2,…,2n1,2,…,2n on the grid, using each integer exactly once.\nA path is a sequence of cells achieved by starting at (1,1)(1,1), then repeatedly walking either downwards or to the right, and stopping when (2,n)(2,n) is reached. The path should not extend beyond the grid.\nThe cost of a path is the alternating sum of the numbers written on the cells in a path. That is, let the numbers written on the cells be a1,a2,…,aka1,a2,…,ak (in the order that it is visited), the cost of the path is a1−a2+a3−a4+…=∑ki=1ai⋅(−1)i+1a1−a2+a3−a4+…=∑ki=1ai⋅(−1)i+1.\nConstruct a way to place the integers 1,2,…,2n1,2,…,2n on the grid, such that the minimum cost over all paths from (1,1)(1,1) to (2,n)(2,n) is maximized. If there are multiple such grids that result in the maximum value, output any of them.\nThe first line contains a single integer tt (1≤t≤10001≤t≤1000) — the number of test cases. The description of test cases follows.\nThe first and the only line of each test case contains a single integer nn (2≤n≤1052≤n≤105, nn is even) — the number of the columns in the grid.\nIt is guaranteed that the sum of nn over all test cases does not exceed 105105.\nFor each test case, output 22 lines, each containing nn integers — the desired grid. If there are multiple solutions, output any of them.\nIn the first test case, there are only two paths from cell (1,1)(1,1) to cell (2,2)(2,2). Their costs are 3−1+4=63−1+4=6 and 3−2+4=53−2+4=5. Then the minimum cost is 55, which is the maximum possible value.\nIn the second test case, there are four paths from cell (1,1)(1,1) to cell (2,4)(2,4). Their costs are 8−1+5−3+7=168−1+5−3+7=16, 8−2+5−3+7=158−2+5−3+7=15, 8−2+6−3+7=168−2+6−3+7=16, and 8−2+6−4+7=158−2+6−4+7=15. Then the minimum value is 1515, which is the maximum possible value.",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "constructive algorithms",
        "greedy",
        "*1000"
    ]
}