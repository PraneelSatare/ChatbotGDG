{
    "title": "B. Maximum Rounding",
    "description": "Given a natural number x. You can perform the following operation: \nNote that the positions are numbered from right to left, starting from zero. If the number has k digits, it is considered that the digit at the k-th position is equal to 0.\nThe rounding is done as follows: \n \n \nYour task is to make x as large as possible, if you can perform the operation as many times as you want.\nFor example, if x is equal to 3451, then if you choose consecutively: \nThe first line contains a single integer t (1≤t≤104) — the number of test cases.\nEach test case consists of positive integer x with a length of up to 2⋅105. It is guaranteed that there are no leading zeros in the integer.\nIt is guaranteed that the sum of the lengths of all integers x over all test cases does not exceed 2⋅105.\nFor each set of input data, output the maximum possible value of x after the operations. The number should not have leading zeros in its representation.\nIn the first sample, it is better not to perform any operations.\nIn the second sample, you can perform one operation and obtain 10.\nIn the third sample, you can choose k=1 or k=2. In both cases the answer will be 100.",
    "time limit": "time limit per test2 seconds",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "greedy",
        "implementation",
        "math",
        "*1100"
    ]
}