{
    "title": "B. Odd Swap Sort",
    "description": "You are given an array a1,a2,…,an. You can perform operations on the array. In each operation you can choose an integer i (1≤i<n), and swap elements ai and ai+1 of the array, if ai+ai+1 is odd.\nDetermine whether it can be sorted in non-decreasing order using this operation any number of times.\nEach test contains multiple test cases. The first line contains a single integer t (1≤t≤105) — the number of test cases. Description of the test cases follows.\nThe first line of each test case contains a single integer n (1≤n≤105) — the length of the array.\nThe second line of each test case contains n integers a1,a2,…,an (1≤ai≤109) — the elements of the array.\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅105.\nFor each test case, print \"Yes\" or \"No\" depending on whether you can or can not sort the given array.\nYou may print each letter in any case (for example, \"YES\", \"Yes\", \"yes\", \"yEs\" will all be recognized as positive answer).\nIn the first test case, we can simply swap 31 and 14 (31+14=45 which is odd) and obtain the non-decreasing array [1,6,14,31].\nIn the second test case, the only way we could sort the array is by swapping 4 and 2, but this is impossible, since their sum 4+2=6 is even.\nIn the third test case, there is no way to make the array non-decreasing.\nIn the fourth test case, the array is already non-decreasing.",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "data structures",
        "math",
        "sortings",
        "*1100"
    ]
}