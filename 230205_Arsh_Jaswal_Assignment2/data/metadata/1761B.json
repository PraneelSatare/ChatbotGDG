{
    "title": "B. Elimination of a Ring",
    "description": "Define a cyclic sequence of size n as an array s of length n, in which sn is adjacent to s1.\nMuxii has a ring represented by a cyclic sequence a of size n.\nHowever, the ring itself hates equal adjacent elements. So if two adjacent elements in the sequence are equal at any time, one of them will be erased immediately. The sequence doesn't contain equal adjacent elements initially.\nMuxii can perform the following operation until the sequence becomes empty:\nFor example, if ring is [1,2,4,2,3,2], and Muxii erases element 4, then ring would erase one of the elements equal to 2, and the ring will become [1,2,3,2].\nMuxii wants to find the maximum number of operations he could perform.\nNote that in a ring of size 1, its only element isn't considered adjacent to itself (so it's not immediately erased).\nEach test contains multiple test cases. The first line contains a single integer t (1≤t≤100) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer n (1≤n≤100) — the size of the cyclic sequence.\nThe second line of each test case contains n integers a1,a2,…,an (1≤ai≤n) — the sequence itself.\nIt's guaranteed that ai≠ai+1 for 1≤i<n.\nIt's guaranteed that an≠a1 when n>1.\nFor each test case, output a single integer — the maximum number of operations Muxii can perform.\nIn the first test case, you can erase the second element first, then erase the remaining elements one by one in any order. In total, you can perform the operation 4 times. Note that if you erase the first element first, then the sequence will be turned into [2,3,2] and then immediately become [2,3].\nIn the second test case, you can erase the first element first, then the sequence becomes [2,1]. Then you can erase all remaining elements one by one in any order.",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "*1000"
    ]
}