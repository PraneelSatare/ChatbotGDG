{
    "title": "B. Count the Number of Pairs",
    "description": "Kristina has a string s of length n, consisting only of lowercase and uppercase Latin letters. For each pair of lowercase letter and its matching uppercase letter, Kristina can get 1 burl. However, pairs of characters cannot overlap, so each character can only be in one pair.\nFor example, if she has the string s = \"aAaaBACacbE\", she can get a burl for the following character pairs: \nKristina wants to get more burles for her string, so she is going to perform no more than k operations on it. In one operation, she can:\nFor example, when k = 2 and s = \"aAaaBACacbE\" it can perform one operation: choose s3 = \"a\" and make it uppercase. Then she will get another pair of s3 = \"A\" and s8 = \"a\"\nFind maximum number of burles Kristina can get for her string.\nThe first line of input data contains a single integer t (1≤t≤104) — the number of test cases.\nThe description of the test cases follows.\nThe first line of each test case contains two integers n (1≤n≤2⋅105) and k (0≤k≤n) — the number of characters in the string and the maximum number of operations that can be performed on it.\nThe second line of each test case contains a string s of length n, consisting only of lowercase and uppercase Latin letters.\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅105.\nFor each test case, print exactly one integer on a separate line: the maximum number of burles that Kristina can get for her string s.\nThe first test case is explained in the problem statement.\nIn the second test case, it is not possible to get any pair by performing any number of operations.",
    "time limit": "time limit per test2 seconds",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "greedy",
        "strings",
        "*1000"
    ]
}