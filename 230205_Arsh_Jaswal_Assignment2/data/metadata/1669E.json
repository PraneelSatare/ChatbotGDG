{
    "title": "E. 2-Letter Strings",
    "description": "Given n strings, each of length 2, consisting of lowercase Latin alphabet letters from 'a' to 'k', output the number of pairs of indices (i,j) such that i<j and the i-th string and the j-th string differ in exactly one position.\nIn other words, count the number of pairs (i,j) (i<j) such that the i-th string and the j-th string have exactly one position p (1≤p≤2) such that sip≠sjp.\nThe answer may not fit into 32-bit integer type, so you should use 64-bit integers like long long in C++ to avoid integer overflow.\nThe first line of the input contains a single integer t (1≤t≤100) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer n (1≤n≤105) — the number of strings.\nThen follows n lines, the i-th of which containing a single string si of length 2, consisting of lowercase Latin letters from 'a' to 'k'.\nIt is guaranteed that the sum of n over all test cases does not exceed 105.\nFor each test case, print a single integer — the number of pairs (i,j) (i<j) such that the i-th string and the j-th string have exactly one position p (1≤p≤2) such that sip≠sjp. \nPlease note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).\nFor the first test case the pairs that differ in exactly one position are: (\"ab\", \"cb\"), (\"ab\", \"db\"), (\"ab\", \"aa\"), (\"cb\", \"db\") and (\"cb\", \"cc\").\nFor the second test case the pairs that differ in exactly one position are: (\"aa\", \"ac\"), (\"aa\", \"ca\"), (\"cc\", \"ac\"), (\"cc\", \"ca\"), (\"ac\", \"aa\") and (\"ca\", \"aa\").\nFor the third test case, the are no pairs satisfying the conditions.",
    "time limit": "time limit per test2 seconds",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "data structures",
        "math",
        "strings",
        "*1200"
    ]
}