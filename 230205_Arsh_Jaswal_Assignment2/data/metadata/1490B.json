{
    "title": "B. Balanced Remainders",
    "description": "You are given a number n (divisible by 3) and an array a[1…n]. In one move, you can increase any of the array elements by one. Formally, you choose the index i (1≤i≤n) and replace ai with ai+1. You can choose the same index i multiple times for different moves.\nLet's denote by c0, c1 and c2 the number of numbers from the array a that have remainders 0, 1 and 2 when divided by the number 3, respectively. Let's say that the array a has balanced remainders if c0, c1 and c2 are equal.\nFor example, if n=6 and a=[0,2,5,5,4,8], then the following sequence of moves is possible: \nFind the minimum number of moves needed to make the array a have balanced remainders.\nThe first line contains one integer t (1≤t≤104). Then t test cases follow.\nThe first line of each test case contains one integer n (3≤n≤3⋅104) — the length of the array a. It is guaranteed that the number n is divisible by 3.\nThe next line contains n integers a1,a2,…,an (0≤ai≤100).\nIt is guaranteed that the sum of n over all test cases does not exceed 150000.\nFor each test case, output one integer — the minimum number of moves that must be made for the a array to make it have balanced remainders.\nThe first test case is explained in the statements.\nIn the second test case, you need to make one move for i=2.\nThe third test case you need to make three moves: \nIn the fourth test case, the values c0, c1 and c2 initially equal to each other, so the array a already has balanced remainders.",
    "time limit": "time limit per test2 seconds",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "brute force",
        "constructive algorithms",
        "math",
        "*1000"
    ]
}