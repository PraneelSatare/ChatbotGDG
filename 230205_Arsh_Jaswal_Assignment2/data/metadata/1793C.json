{
    "title": "C. Dora and Search",
    "description": "As you know, the girl Dora is always looking for something. This time she was given a permutation, and she wants to find such a subsegment of it that none of the elements at its ends is either the minimum or the maximum of the entire subsegment. More formally, you are asked to find the numbers l and r (1≤l≤r≤n) such that al≠min(al,al+1,…,ar), al≠max(al,al+1,…,ar) and ar≠min(al,al+1,…,ar), ar≠max(al,al+1,…,ar).\nA permutation of length n is an array consisting of n distinct integers from 1 to n in any order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 occurs twice in the array) and [1,3,4] is also not a permutation (n=3, but 4 is present in the array).\nHelp Dora find such a subsegment, or tell her that such a subsegment does not exist.\nEach test consists of multiple test cases. The first line contains a single integer t (1≤t≤104) — the number of test cases. Description of the test cases follows.\nFor each test case, the first line contains one integer n (1≤n≤2⋅105) — the length of permutation.\nThe second line contains n distinct integers a1,a2,…,an (1≤ai≤n) — the elements of permutation. \nIt is guarented that the sum of n over all test cases doesn't exceed 2⋅105.\nFor each test case, output −1 if the desired subsegment does not exist.\nOtherwise, output two indexes l,r such that [al,al+1,…,ar] satisfies all conditions.\nIf there are several solutions, then output any of them.\nIn the first and fourth test cases, it can be shown that there are no desired subsegments.\nIn the second test case, the subsegment [1,4] satisfies all the conditions, because max(a1,a2,a3,a4)=4,min(a1,a2,a3,a4)=1, as we see, all the conditions are met.\nIn the third test case, the subsegment [2,6] also satisfies all the conditions described.",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "constructive algorithms",
        "data structures",
        "two pointers",
        "*1200"
    ]
}