{
    "title": "C. Premutation",
    "description": "A sequence of n numbers is called permutation if it contains all integers from 1 to n exactly once. For example, the sequences [3,1,4,2], [1] and [2,1] are permutations, but [1,2,1], [0,1] and [1,3,4] — are not.\nKristina had a permutation p of n elements. She wrote it on the whiteboard n times in such a way that: \nFor example, suppose Kristina had a permutation p = [4,2,1,3] of length 4. Then she did the following: \nYou know all n of sequences that have been written on the whiteboard, but you do not know the order in which they were written. They are given in arbitrary order. Reconstruct the original permutation from them.\nFor example, if you know the sequences [4,2,1], [4,2,3], [2,1,3], [4,1,3], then the original permutation will be p = [4,2,1,3].\nThe first line of input data contains a single integer t (1≤t≤104) — the number of test cases.\nThe description of the test cases follows.\nThe first line of each test case contains one integer n (3≤n≤100).\nThis is followed by n lines, each containing exactly n−1 integers and describing one of the sequences written out on the whiteboard.\nIt is guaranteed that all sequences could be obtained from some permutation p, and that the sum n2 over all input sets does not exceed 2⋅105.\nFor each test case, output on a separate line a permutation p such that the given n sequences could be obtained from it.\nIt is guaranteed that the answer exists and it is the only one. In other words, for each test case the required permutation is sure to exist.\nThe first test case is described in the problem statement.\nIn the second test case, the sequences are written in the correct order.",
    "time limit": "time limit per test3 seconds",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "brute force",
        "implementation",
        "math",
        "*1000"
    ]
}