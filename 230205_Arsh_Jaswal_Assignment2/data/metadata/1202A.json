{
    "title": "A. You Are Given Two Binary Strings...",
    "description": "You are given two binary strings x and y, which are binary representations of some two integers (let's denote these integers as f(x) and f(y)). You can choose any integer k≥0, calculate the expression sk=f(x)+f(y)⋅2k and write the binary representation of sk in reverse order (let's denote it as revk). For example, let x=1010 and y=11; you've chosen k=1 and, since 21=102, so sk=10102+112⋅102=100002 and revk=00001.\nFor given x and y, you need to choose such k that revk is lexicographically minimal (read notes if you don't know what does \"lexicographically\" means).\nIt's guaranteed that, with given constraints, k exists and is finite.\nThe first line contains a single integer T (1≤T≤100) — the number of queries.\nNext 2T lines contain a description of queries: two lines per query. The first line contains one binary string x, consisting of no more than 105 characters. Each character is either 0 or 1.\nThe second line contains one binary string y, consisting of no more than 105 characters. Each character is either 0 or 1.\nIt's guaranteed, that 1≤f(y)≤f(x) (where f(x) is the integer represented by x, and f(y) is the integer represented by y), both representations don't have any leading zeroes, the total length of x over all queries doesn't exceed 105, and the total length of y over all queries doesn't exceed 105.\nPrint T integers (one per query). For each query print such k that revk is lexicographically minimal.\nThe first query was described in the legend.\nIn the second query, it's optimal to choose k=3. The 23=10002 so s3=100012+1102⋅10002=10001+110000=1000001 and rev3=1000001. For example, if k=0, then s0=10111 and rev0=11101, but rev3=1000001 is lexicographically smaller than rev0=11101.\nIn the third query s0=10 and rev0=01. For example, s2=101 and rev2=101. And 01 is lexicographically smaller than 101.\nThe quote from Wikipedia: \"To determine which of two strings of characters comes when arranging in lexicographical order, their first letters are compared. If they differ, then the string whose first letter comes earlier in the alphabet comes before the other string. If the first letters are the same, then the second letters are compared, and so on. If a position is reached where one string has no more letters to compare while the other does, then the first (shorter) string is deemed to come first in alphabetical order.\"",
    "time limit": "time limit per test2 seconds",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "bitmasks",
        "greedy",
        "*1100"
    ]
}