{
    "title": "C. Even Positions",
    "description": "Monocarp had a regular bracket sequence s of length n (n is even). He even came up with his own way to calculate its cost.\nHe knows that in a regular bracket sequence (RBS), each opening bracket is paired up with the corresponding closing bracket. So he decided to calculate the cost of RBS as the sum of distances between pairs of corresponding bracket pairs.\nFor example, let's look at RBS (())(). It has three pairs of brackets: \nUnfortunately, due to data corruption, Monocarp lost all characters on odd positions s1,s3,…,sn−1. Only characters on even positions (s2,s4,…,sn) remain. For example, (())() turned to _(_)_).\nMonocarp wants to restore his RBS by placing brackets on the odd positions. But since the restored RBS may not be unique, he wants to choose one with minimum cost. It's too hard to do for Monocarp alone, so can you help him?\nReminder: A regular bracket sequence is a string consisting of only brackets, such that this sequence, when inserted 1-s and +-s, gives a valid mathematical expression. For example, (), (()) or (()())() are RBS, while ), ()( or ())(() are not.\nThe first line contains a single integer t (1≤t≤5000) — the number of test cases. Next t cases follow.\nThe first line of each test case contains a single integer n (2≤n≤2⋅105; n is even) — the length of string s.\nThe second line of each test case contains a string s of length n, where all characters on the odd positions are '_' and all characters on the even positions are either '(' or ')'.\nAdditional constraints: \nFor each test case, print one integer — the minimum cost of the regular bracket sequence that can be obtained from s by replacing '_'-s with brackets.\nIn the first test case, it's optimal to make s equal to (())(). The cost of s will be equal to 3+1+1=5.\nIn the second test case, the only option is to make s equal to () with cost 1.\nIn the third test case, the only possible RBS is ()()()() with cost 1+1+1+1=4.\nIn the fourth test case, it's optimal to make s equal to (())(()) with cost 3+1+3+1=8.",
    "time limit": "time limit per test2 seconds",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "*1100"
    ]
}