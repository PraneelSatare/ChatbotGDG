{
    "title": "B. Paranoid String",
    "description": "Let's call a binary string T of length m indexed from 1 to m paranoid if we can obtain a string of length 1 by performing the following two kinds of operations m−1 times in any order :\nFor example, if T= 001, we can select the substring [T2T3] and perform the first operation. So we obtain T= 01.\nYou are given a binary string S of length n indexed from 1 to n. Find the number of pairs of integers (l,r) 1≤l≤r≤n such that S[l…r] (the substring of S from l to r) is a paranoid string. \nThe first line contains an integer t (1≤t≤1000) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer n (1≤n≤2⋅105) — the size of S.\nThe second line of each test case contains a binary string S of n characters S1S2…Sn. (Si= 0 or Si= 1 for each 1≤i≤n)\nIt is guaranteed that the sum of n over all test cases doesn't exceed 2⋅105.\nFor each test case, output the number of pairs of integers (l,r) 1≤l≤r≤n such that S[l…r] (the substring of S from l to r) is a paranoid string. \nIn the first sample, S already has length 1 and doesn't need any operations.\nIn the second sample, all substrings of S are paranoid. For the entire string, it's enough to perform the first operation.\nIn the third sample, all substrings of S are paranoid except [S2S3], because we can't perform any operations on it, and [S1S2S3] (the entire string).",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "constructive algorithms",
        "greedy",
        "*1200"
    ]
}