{
    "title": "G1. Subsequence Addition (Easy Version)",
    "description": "The only difference between the two versions is that in this version, the constraints are lower.\nInitially, array a contains just the number 1. You can perform several operations in order to change the array. In an operation, you can select some subsequence† of a and add into a an element equal to the sum of all elements of the subsequence. \nYou are given a final array c. Check if c can be obtained from the initial array a by performing some number (possibly 0) of operations on the initial array.\n† A sequence b is a subsequence of a sequence a if b can be obtained from a by the deletion of several (possibly zero, but not all) elements. In other words, select k (1≤k≤|a|) distinct indices i1,i2,…,ik and insert anywhere into a a new element with the value equal to ai1+ai2+⋯+aik.\nThe first line of the input contains an integer t (1≤t≤1000) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains a single integer n (1≤n≤5000)  — the number of elements the final array c should have.\nThe second line of each test case contains n space-separated integers ci (1≤ci≤5000)  — the elements of the final array c that should be obtained from the initial array a.\nIt is guaranteed that the sum of n over all test cases does not exceed 5000.\nFor each test case, output \"YES\" (without quotes) if such a sequence of operations exists, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).\nFor the first test case, the initial array a is already equal to [1], so the answer is \"YES\".\nFor the second test case, performing any amount of operations will change a to an array of size at least two which doesn't only have the element 2, thus obtaining the array [2] is impossible and the answer is \"NO\".\nFor the third test case, we can perform the following operations in order to obtain the final given array c:",
    "time limit": "time limit per test2 seconds",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "greedy",
        "implementation",
        "sortings",
        "*1100"
    ]
}