{
    "title": "A. Johnny and Ancient Computer",
    "description": "Johnny has recently found an ancient, broken computer. The machine has only one register, which allows one to put in there one variable. Then in one operation, you can shift its bits left or right by at most three positions. The right shift is forbidden if it cuts off some ones. So, in fact, in one operation, you can multiply or divide your number by 2, 4 or 8, and division is only allowed if the number is divisible by the chosen divisor. \nFormally, if the register contains a positive integer x, in one operation it can be replaced by one of the following: \nFor example, if x=6, in one operation it can be replaced by 12, 24, 48 or 3. Value 6 isn't divisible by 4 or 8, so there're only four variants of replacement.\nNow Johnny wonders how many operations he needs to perform if he puts a in the register and wants to get b at the end.\nThe input consists of multiple test cases. The first line contains an integer t (1≤t≤1000) — the number of test cases. The following t lines contain a description of test cases.\nThe first and only line in each test case contains integers a and b (1≤a,b≤1018) — the initial and target value of the variable, respectively.\nOutput t lines, each line should contain one integer denoting the minimum number of operations Johnny needs to perform. If Johnny cannot get b at the end, then write −1.\nIn the first test case, Johnny can reach 5 from 10 by using the shift to the right by one (i.e. divide by 2).\nIn the second test case, Johnny can reach 44 from 11 by using the shift to the left by two (i.e. multiply by 4).\nIn the third test case, it is impossible for Johnny to reach 21 from 17.\nIn the fourth test case, initial and target values are equal, so Johnny has to do 0 operations.\nIn the fifth test case, Johnny can reach 3 from 96 by using two shifts to the right: one by 2, and another by 3 (i.e. divide by 4 and by 8).",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "implementation",
        "*1000"
    ]
}