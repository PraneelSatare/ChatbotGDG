{
    "title": "B. A Perfectly Balanced String?",
    "description": "Let's call a string s perfectly balanced if for all possible triplets (t,u,v) such that t is a non-empty substring of s and u and v are characters present in s, the difference between the frequencies of u and v in t is not more than 1.\nFor example, the strings \"aba\" and \"abc\" are perfectly balanced but \"abb\" is not because for the triplet (\"bb\",'a','b'), the condition is not satisfied.\nYou are given a string s consisting of lowercase English letters only. Your task is to determine whether s is perfectly balanced or not.\nA string b is called a substring of another string a if b can be obtained by deleting some characters (possibly 0) from the start and some characters (possibly 0) from the end of a.\nThe first line of input contains a single integer t (1≤t≤2⋅104) denoting the number of testcases.\nEach of the next t lines contain a single string s (1≤|s|≤2⋅105), consisting of lowercase English letters.\nIt is guaranteed that the sum of |s| over all testcases does not exceed 2⋅105.\nFor each test case, print \"YES\" if s is a perfectly balanced string, and \"NO\" otherwise.\nYou may print each letter in any case (for example, \"YES\", \"Yes\", \"yes\", \"yEs\" will all be recognized as positive answer).\nLet ft(c) represent the frequency of character c in string t.\nFor the first testcase we have \n\nFor the second testcase we have \n\nFor the third testcase we have \n\nIt can be seen that for any substring t of s and any two characters u,v∈{a,b,c}, the difference between ft(u) and ft(v) is not more than 1. Hence the string s is perfectly balanced.",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "brute force",
        "greedy",
        "strings",
        "*1100"
    ]
}