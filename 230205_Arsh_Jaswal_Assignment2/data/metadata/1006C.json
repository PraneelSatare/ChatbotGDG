{
    "title": "C. Three Parts of the Array",
    "description": "You are given an array d1,d2,…,dn consisting of n integer numbers.\nYour task is to split this array into three parts (some of which may be empty) in such a way that each element of the array belongs to exactly one of the three parts, and each of the parts forms a consecutive contiguous subsegment (possibly, empty) of the original array. \nLet the sum of elements of the first part be sum1, the sum of elements of the second part be sum2 and the sum of elements of the third part be sum3. Among all possible ways to split the array you have to choose a way such that sum1=sum3 and sum1 is maximum possible.\nMore formally, if the first part of the array contains a elements, the second part of the array contains b elements and the third part contains c elements, then:\nsum1=∑1≤i≤adi, sum2=∑a+1≤i≤a+bdi, sum3=∑a+b+1≤i≤a+b+cdi.\nThe sum of an empty array is 0.\nYour task is to find a way to split the array such that sum1=sum3 and sum1 is maximum possible.\nThe first line of the input contains one integer n (1≤n≤2⋅105) — the number of elements in the array d.\nThe second line of the input contains n integers d1,d2,…,dn (1≤di≤109) — the elements of the array d.\nPrint a single integer — the maximum possible value of sum1, considering that the condition sum1=sum3 must be met.\nObviously, at least one valid way to split the array exists (use a=c=0 and b=n).\nIn the first example there is only one possible splitting which maximizes sum1: [1,3,1],[ ],[1,4].\nIn the second example the only way to have sum1=4 is: [1,3],[2,1],[4].\nIn the third example there is only one way to split the array: [ ],[4,1,2],[ ].",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "binary search",
        "data structures",
        "two pointers",
        "*1200"
    ]
}