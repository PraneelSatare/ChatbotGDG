{
    "title": "B. Equalize by Divide",
    "description": "You are given an array a1,a2,…,an of positive integers.\nYou can make this operation multiple (possibly zero) times:\nIs it possible to make all array elements equal by some sequence of operations (possibly empty)? If yes, print any way to do it in at most 30n operations.\nIt can be proven, that under the problem constraints, if some way exists to make all elements equal, there exists a way with at most 30n operations.\nThe first line contains a single integer t (1≤t≤1000) — the number of test cases. Descriptions of test cases follow.\nThe first line of each test case description contains a single integer n (1≤n≤100).\nThe second line of each test case description contains n integers a1,a2,…,an (1≤ai≤109).\nIt is guaranteed, that the sum of n for all test cases does not exceed 1000.\nFor each test case print a single integer q (−1≤q≤30n). If q=−1, there is no solution, otherwise q is equal to the number of operations.\nIf q≥0, on the next q lines print two integers i, j (1≤i,j≤n, i≠j) — descriptions of operations.\nIf there are multiple solutions, you can print any.\nIn the first and second, fourth test cases all numbers are equal, so it is possible to do nothing.\nIn the third test case, it is impossible to make all numbers equal.\nIn the fifth test case: [4,3,2]→[2,3,2]→[2,2,2].\nIn the sixth test case: [3,3,4,4]→[3,3,2,4]→[3,3,2,2]→[2,3,2,2]→[2,2,2,2].\nHere the red numbers are i indices (that will be assigned), blue numbers are j indices.",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "math",
        "*1200"
    ]
}