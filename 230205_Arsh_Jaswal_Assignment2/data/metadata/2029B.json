{
    "title": "B. Replacement",
    "description": "You have a binary string∗ s of length n, and Iris gives you another binary string r of length n−1.\nIris is going to play a game with you. During the game, you will perform n−1 operations on s. In the i-th operation (1≤i≤n−1):\nIf all the n−1 operations are performed successfully, you win.\nDetermine whether it is possible for you to win this game.\n∗A binary string is a string where each character is either 0 or 1.\nEach test contains multiple test cases. The first line of the input contains a single integer t (1≤t≤104) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer n (2≤n≤105) — the length of s.\nThe second line contains the binary string s of length n (si=0 or 1).\nThe third line contains the binary string r of length n−1 (ri=0 or 1).\nIt is guaranteed that the sum of n over all test cases does not exceed 105.\nFor each test case, print \"YES\" (without quotes) if you can win the game, and \"NO\" (without quotes) otherwise.\nYou can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.\nIn the first test case, you cannot perform the first operation. Thus, you lose the game.\nIn the second test case, you can choose k=1 in the only operation, and after that, s becomes equal to 1. Thus, you win the game.\nIn the third test case, you can perform the following operations: 110_1r1=0→101_r2=0→10_r3=1→1.",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "constructive algorithms",
        "games",
        "strings",
        "*1100"
    ]
}