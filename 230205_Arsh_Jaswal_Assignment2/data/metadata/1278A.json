{
    "title": "A. Shuffle Hashing",
    "description": "Polycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\nPolycarp decided to store the hash of the password, generated by the following algorithm:\nFor example, let the password p= \"abacaba\". Then p′ can be equal to \"aabcaab\". Random strings s1= \"zyx\" and s2= \"kjh\". Then h= \"zyxaabcaabkjh\".\nNote that no letters could be deleted or added to p to obtain p′, only the order could be changed.\nNow Polycarp asks you to help him to implement the password check module. Given the password p and the hash h, check that h can be the hash for the password p.\nYour program should answer t independent test cases.\nThe first line contains one integer t (1≤t≤100) — the number of test cases.\nThe first line of each test case contains a non-empty string p, consisting of lowercase Latin letters. The length of p does not exceed 100.\nThe second line of each test case contains a non-empty string h, consisting of lowercase Latin letters. The length of h does not exceed 100.\nFor each test case print the answer to it — \"YES\" if the given hash h could be obtained from the given password p or \"NO\" otherwise.\nThe first test case is explained in the statement.\nIn the second test case both s1 and s2 are empty and p′= \"threetwoone\" is p shuffled.\nIn the third test case the hash could not be obtained from the password.\nIn the fourth test case s1= \"n\", s2 is empty and p′= \"one\" is p shuffled (even thought it stayed the same). \nIn the fifth test case the hash could not be obtained from the password.",
    "time limit": "time limit per test2 seconds",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "brute force",
        "implementation",
        "strings",
        "*1000"
    ]
}