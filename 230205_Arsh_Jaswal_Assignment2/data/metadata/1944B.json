{
    "title": "B. Equal XOR",
    "description": "You are given an array a of length 2n, consisting of each integer from 1 to n exactly twice.\nYou are also given an integer k (1≤k≤⌊n2⌋).\nYou need to find two arrays l and r each of length 2k such that: \nIt can be proved that at least one pair of l and r always exists. If there are multiple solutions, you may output any one of them.\n† A sequence x is a subset of a sequence y if x can be obtained by deleting several (possibly none or all) elements of y and rearranging the elements in any order. For example, [3,1,2,1], [1,2,3], [1,1] and [3,2] are subsets of [1,1,2,3] but [4] and [2,2] are not subsets of [1,1,2,3].\nEach test contains multiple test cases. The first line contains a single integer t (1≤t≤5000) — the number of test cases. The description of the test cases follows.\nThe first line of each test case contains 2 integers n and k (2≤n≤5⋅104, 1≤k≤⌊n2⌋).\nThe second line contains 2n integers a1,a2,…,a2n (1≤ai≤n). It is guaranteed that every integer from 1 to n occurs exactly twice in a.\nIt is guaranteed that the sum of n over all test cases does not exceed 5⋅104.\nFor each test case, output two lines. \nOn the first line of output, output 2k integers l1,l2,…,l2k.\nOn the second line of output, output 2k integers r1,r2,…r2k.\nIf there are multiple solutions, you may output any one of them.\nIn the first test case, we choose l=[2,1] and r=[2,1]. [2,1] is a subset of [a1,a2] and [2,1] is a subset of [a3,a4], and 2⊕1=2⊕1=3.\nIn the second test case, 6⊕4=1⊕3=2.",
    "time limit": "time limit per test1 second",
    "memory limit": "memory limit per test256 megabytes",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "*1100"
    ]
}