Andrew has n piles with stones. The i-th pile contains ai stones. He wants to make his table clean so he decided to put every stone either to the 1-st or the n-th pile.
Andrew can perform the following operation any number of times: choose 3 indices 1≤i<j<k≤n, such that the j-th pile contains at least 2 stones, then he takes 2 stones from the pile j and puts one stone into pile i and one stone into pile k. 
Tell Andrew what is the minimum number of operations needed to move all the stones to piles 1 and n, or determine if it's impossible.
The input contains several test cases. The first line contains one integer t (1≤t≤10000) — the number of test cases.
The first line for each test case contains one integer n (3≤n≤105) — the length of the array.
The second line contains a sequence of integers a1,a2,…,an (1≤ai≤109) — the array elements.
It is guaranteed that the sum of the values n over all test cases does not exceed 105.
For each test case print the minimum number of operations needed to move stones to piles 1 and n, or print −1 if it's impossible.
In the first test case, it is optimal to do the following: 
In the second test case, it's impossible to put all stones into piles with numbers 1 and 3: 
In the third test case, it's optimal to do the following: 
In the fourth test case, it's impossible to do any operation, and the array doesn't satisfy the statement, so the answer is −1.