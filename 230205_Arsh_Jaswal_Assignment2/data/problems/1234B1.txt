The only difference between easy and hard versions are constraints on n and k.
You are messaging in one of the popular social networks via your smartphone. Your smartphone can show at most k most recent conversations with your friends. Initially, the screen is empty (i.e. the number of displayed conversations equals 0).
Each conversation is between you and some of your friends. There is at most one conversation with any of your friends. So each conversation is uniquely defined by your friend.
You (suddenly!) have the ability to see the future. You know that during the day you will receive n messages, the i-th message will be received from the friend with ID idi (1≤idi≤109).
If you receive a message from idi in the conversation which is currently displayed on the smartphone then nothing happens: the conversations of the screen do not change and do not change their order, you read the message and continue waiting for new messages.
Otherwise (i.e. if there is no conversation with idi on the screen):
Your task is to find the list of conversations (in the order they are displayed on the screen) after processing all n messages.
The first line of the input contains two integers n and k (1≤n,k≤200) — the number of messages and the number of conversations your smartphone can show.
The second line of the input contains n integers id1,id2,…,idn (1≤idi≤109), where idi is the ID of the friend which sends you the i-th message.
In the first line of the output print one integer m (1≤m≤min(n,k)) — the number of conversations shown after receiving all n messages.
In the second line print m integers ids1,ids2,…,idsm, where idsi should be equal to the ID of the friend corresponding to the conversation displayed on the position i after receiving all n messages.
In the first example the list of conversations will change in the following way (in order from the first to last message):
In the second example the list of conversations will change in the following way: