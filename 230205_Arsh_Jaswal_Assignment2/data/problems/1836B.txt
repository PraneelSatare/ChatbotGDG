In many, many years, far, far away, there will be a launch of the first flight to Mars. To celebrate the success, n astrophysicists working on the project will be given bonuses of a total value of k gold coins.
You have to distribute the money among the astrophysicists, and to make it easier, you have to assign bonuses in silver coins. Each gold coin is worth g silver coins, so you have to distribute all k⋅g silver coins among n people.
Unfortunately, the company has some financial troubles right now. Therefore, instead of paying the number of silver coins written on the bonus, they decided to round this amount to the nearest integer number of gold coins.
The rounding procedure is as follows. If an astrophysicist has bonus equal to x silver coins, and we denote r=xmodg, then: 
You aim to distribute the bonuses so that the company saves as many silver coins due to rounding as possible. Please note that there is always a distribution in which the company spends no more than k⋅g silver coins.
In the first line of input, there is one integer t (1≤t≤104) denoting the number of test cases.
Each of the following t lines describes one test case and contains three integers n, k, g (1≤n≤109, 0≤k≤109, 2≤g≤109) — respectively the number of astrophysicists in the company, total number of gold coins to assign and the number of silver coins that one gold coin corresponds to.
In a separate line for each test case, output a single integer — the maximum number of silver coins that could be saved due to rounding.
In the first test case, one of the optimal assignments could be the following:
In the second test case, we could have the following assignment: 
If the bonuses are assigned to 7 silver coins for both astrophysicists, then the company would have to pay an additional gold coin to cover the bonuses.