{
    "solution": "1904B - Collecting GameIdea: oursaco  Preparation: oursaco  Analysis: lunchbox SolutionLet's sort array a. The answer for the largest element is n−1 because the score, which is an, cannot be smaller than any of the other elements. Now, consider the second largest element. The answer is at least n−2 because every element that is not greater than an−1 can be taken. Then, we check if the score is at least an. This inspires the following solution: first, we find the prefix sum p of array a. We calculate the answer in decreasing order of ai. To calculate the answer for an ai, we find the largest j such that pi≥aj and set the answer for i equal to the answer of j. Code#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\nusing namespace std;\n\n#define pb push_back\n#define ff first\n#define ss second\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ld, ld> pld;\n\nconst int INF = 1e9;\nconst ll LLINF = 1e18;\nconst int MOD = 1e9 + 7;\n\ntemplate<class K> using sset =  tree<K, null_type, less<K>, rb_tree_tag, tree_order_statistics_node_update>;\n\ninline ll ceil0(ll a, ll b) {\n    return a / b + ((a ^ b) > 0 && a % b);\n}\n\nvoid setIO() {\n    ios_base::sync_with_stdio(0); cin.tie(0);\n}\n\nint main(){\n    setIO();\n    int T;\n    cin >> T;\n    for(int tt = 1; tt <= T; tt++){\n        int n;\n        cin >> n;\n        pii arr[n + 1];\n        for(int i = 1; i <= n; i++) cin >> arr[i].ff, arr[i].ss = i;\n        sort(arr + 1, arr + n + 1);\n        int nxt[n + 1];\n        ll sum[n + 1];\n        int ans[n + 1];\n        nxt[0] = sum[0] = 0;\n        for(int i = 1; i <= n; i++){\n            if(nxt[i - 1] >= i){\n                nxt[i] = nxt[i - 1];\n                sum[i] = sum[i - 1];\n            } else {\n                sum[i] = sum[i - 1] + arr[i].ff;\n                nxt[i] = i;\n                while(nxt[i] + 1 <= n && sum[i] >= arr[nxt[i] + 1].ff){\n                    nxt[i]++;\n                    sum[i] += arr[nxt[i]].ff;\n                }\n            }\n            ans[arr[i].ss] = nxt[i];\n        }\n        for(int i = 1; i <= n; i++) cout << ans[i] - 1 << \" \";\n        cout << endl;\n    }\n}"
}