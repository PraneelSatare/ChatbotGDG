{
    "solution": "1886B - Fear of the DarkThere are only two major cases: both points O and P lie inside the same circle, or the point O lies inside one of the circles and P lies inside the other circle.Let's denote the distance between the points P and Q as d(P,Q).Let's look at the first case, when the points O and P lie inside the circle centered at A. In that case, inequalities d(O,A)≤R and d(P,A)≤R must be satisfied. Therefore, the minimum possible radius for that case is equal to max(d(O,A),d(P,A)). Similarly, for the circle centered at B, the minimum possible radius for that case is equal to max(d(O,B),d(P,B)).Let's look at the second case, when the point O lies inside the circle centered at A and the point P lies inside the circle centered at B. In that case, inequalities d(O,A)≤R and d(P,B)≤R must be satisfied. But there is one extra constraint: the circles must intersect, because there is should an illuminated path from one circle to another. This adds one more inequality — d(A,B)≤2R. Therefore, the minimum possible radius for that case is equal to max(d(O,A),d(P,B),d(A,B)2). Similarly, when O lies inside the circle centered at B and P lies inside the circle centered at A, the minimum possible radius for that case is equal to max(d(O,B),d(P,A),d(A,B)2).So the answer to the problem is the minimum among aforementioned cases. Solution (Neon)#include <bits/stdc++.h>\n \nusing namespace std;\n \nint main() {\n  auto dist = [](int x1, int y1, int x2, int y2) {\n    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n  };\n \n  int t;\n  cin >> t;\n  while (t--) {\n    int px, py, ax, ay, bx, by;\n    cin >> px >> py >> ax >> ay >> bx >> by;\n    double pa = dist(px, py, ax, ay), pb = dist(px, py, bx, by);\n    double oa = dist(0, 0, ax, ay), ob = dist(0, 0, bx, by);\n    double ab = dist(ax, ay, bx, by);\n    double ans = 1e9;\n    ans = min(ans, max(pa, oa));\n    ans = min(ans, max(pb, ob));\n    ans = min(ans, max({ab / 2, pa, ob}));\n    ans = min(ans, max({ab / 2, pb, oa}));\n    cout << setprecision(10) << fixed << ans << '\\n';\n  }\n}"
}