{
    "solution": "1272C - Yet Another Broken KeyboardLet's replace all characters of s with zeros and ones (zero if the character is unavailable and one otherwise). Then we have the binary string and we have to calculate the number of contiguous segments of this string consisting only of ones. It can be done with two pointers approach.If we are staying at the position i and its value is zero, just skip it. Otherwise, let's find the leftmost position j such that j>i and the j-th value is zero. Then we have to add to the answer the value (j−i)⋅(j−i+1)2 and set i:=j.Time complexity: O(n). Solution#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, k;\n\tcin >> n >> k;\n\tstring s;\n\tcin >> s;\n\tset<char> st;\n\tfor (int i = 0; i < k; ++i) {\n\t\tchar c;\n\t\tcin >> c;\n\t\tst.insert(c);\n\t}\n\t\n\tlong long ans = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint j = i;\n\t\twhile (j < n && st.count(s[j])) ++j;\n\t\tint len = j - i;\n\t\tans += len * 1ll * (len + 1) / 2;\n\t\ti = j;\n\t}\n\tcout << ans << endl;\n\t\n\treturn 0;\n}"
}