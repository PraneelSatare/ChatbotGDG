{
    "solution": "1791G1 - Teleporters (Easy Version)It's easy to see that it's optimal to only move right or to use a portal once we are at it. We can notice that when we teleport back, the problem is independent of the previous choices. We still are at point 0 and have some portals left. Thus, we can just find out the individual cost of each portal, sort portals by individual costs, and take them from smallest to largest by cost as long as we can. The cost of portal i is i+ai (since we pay ai to use it and need i moves to get to it). Solution#include \"bits/stdc++.h\"\nusing namespace std;\n \n#define ll long long\n\n#define          all(v)              v.begin(), v.end()\n#define         rall(v)              v.rbegin(),v.rend()\n \n#define            pb                push_back\n#define          sz(a)               (int)a.size()\n\nvoid solve() {\n    int n, c, ans = 0; cin >> n >> c;\n    priority_queue<int> q;\n    for(int i = 1, x; i <= n; ++i) {\n        cin >> x;\n        q.push(-x - i);\n    }\n    while(!q.empty()) {\n        int x = -q.top(); q.pop();\n        if(x > c) break;\n        ++ans;\n        c -= x;\n    }\n    cout << ans << \"\\n\";\n}   \n \nint32_t main() {\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    int t = 1;\n    cin >> t;\n    while(t--) {\n        solve();\n    }\n}"
}