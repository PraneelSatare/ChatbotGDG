1997C - Even PositionsLet's define a balance of a bracket sequence as the number_of_opening_brackets−number_of_closing_brackets.It's a well-known fact that for RBS the balance of all its prefixes must be greater than or equal to zero and the balance of the whole string must be exactly zero. So, if we want to restore RBS from s we shouldn't break that rule.Next, let's define So as the sum of positions of the opening brackets in RBS and Sc as the sum of positions of the closing brackets in RBS.It turns out that the cost defined in the statement is just Sc−So. Moreover, you can see that Sc−So=2Sc−n(n+1)2. It means that in order to minimize the cost, we should minimize Sc, or we should try to place closing brackets on the smaller positions.The most interesting part is that it's enough to come up with the right strategy. Let's iterate from left to right, maintaining the current balance and place the closing brackets whenever we can:   if the current balance is 0 we can't place a closing bracket, since it will make the balance negative, so we place an opening bracket;  if the current balance is bigger than 0 we place a closing bracket. Since we need to calculate the cost of the RBS, we can replace the balance counter with a stack containing positions of opening brackets that don't have a pair yet. Each time we meet an opening bracket, we'll push its position to the top of the stack, and each time we meet a closing bracket, we'll take one bracket from the top of the stack. The current balance is just the size of the stack.Here is a sketch of the proof, why the strategy above is correct.Firstly, the strategy creates RBS, because after processing a prefix of even length the current balance will be equal to either 0 or 2, while after an odd length prefix it will be always 1. At the start, the balance is 0 and we make it 1, then it either becomes 0 or 2, and in both cases we return it to 1 and so on. Since the last character is always a closing bracket, the total balance will return to 0.Secondly, to prove that the strategy minimizes the cost, we can use a standard technique of proof by contradiction: suppose there is a better answer, look at the first position of the difference: it will be ) in our string and ( in the answer. Then just find the next ) in the answer and swap them. The answer will stay RBS, while Sc will decrease — contradiction. Solution (adedalic)import java.util.LinkedList
 
fun main() {
    repeat(readln().toInt()) {
        val n = readln().toInt()
        val s = readln()
 
        var ans = 0L
        val bracketPositions = LinkedList<Int>()
        for (i in s.indices) {
            var c = s[i]
            if (c == '_') {
                c = if (bracketPositions.isEmpty()) '(' else ')'
            }
            if (c == ')') {
                ans += i - bracketPositions.pollLast()
            }
            else
                bracketPositions.addLast(i)
        }
        println(ans)
    }
}