{
    "solution": "999C - Alphabetic RemovalsLet the lowercase Latin letters be indexed from 0 to 25.There are exists at least two different solutions:If k=n exit the program. Otherwise, count the number of occurrences of each letter i from 0 to 25. Let it be cnt. Now, find the (alphabetically) smallest letter that will be in the resulting string. It can be done as follows: iterate over all i from 0 to 25, and if cnti≤k then subtract it from k, otherwise, i will be the smallest letter that will be in the resulting string. But we (possibly) need to remove some number of its leftmost occurrences. It is obvious that letters smaller than i will not appear in the resulting string. Also, the k leftmost occurrences of letter i will be removed. Now, let's iterate over all letters in string s from left to right and construct the resulting string res. If the current character of s (let it be sj) is smaller than i, then do nothing. If sj is greater than i, then add it to res. Otherwise sj=i. If k>0, then decrease k by one, otherwise, add sj to res. The time complexity is O(n).Another solution is the following. Let's carry the vector of pairs (si,i) where si is the i-th character of s and i is its position. If we sort this vector with the standard compare function, it is easy to see that the first k elements of this vector will be removed from the input string. Then if we will sort the last n−k elements of this vector by its positions in the input string in increasing order, we will obtain the answer. The time complexity is O(nlogn). Solution 1 (Vovuh)#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, k;\n\tcin >> n >> k;\n\tstring s;\n\tcin >> s;\n\t\n\tvector<int> cnt(26);\n\tfor (auto c : s) ++cnt[c - 'a'];\n\n\tint pos = 26;\n\tfor (int i = 0; i < 26; ++i) {\n\t\tif (k >= cnt[i]) {\n\t\t\tk -= cnt[i];\n\t\t} else {\n\t\t\tpos = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tstring ans;\n\tint rem = k;\n\tfor (auto c : s) {\n\t\tint cur = c - 'a';\n\t\tif (cur > pos || (cur == pos && rem == 0)) {\n\t\t\tans += c;\n\t\t} else if (cur == pos) {\n\t\t\t--rem;\n\t\t}\n\t}\n\t\n\tcout << ans << endl;\n\t\n\treturn 0;\n} Solution 2 (Vovuh)#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, k;\n\tcin >> n >> k;\n\tstring s;\n\tcin >> s;\n\n\tvector<pair<char, int>> c(n);\n\tfor (int i = 0; i < n; ++i)\n\t\tc[i] = make_pair(s[i], i);\n\tsort(c.begin(), c.end());\n\tsort(c.begin() + k, c.end(), [&] (const pair<char, int> &a, const pair<char, int> &b) {\n\t\treturn a.second < b.second;\n\t});\n\t\n\tfor (int i = k; i < n; ++i)\n\t\tcout << c[i].first;\n\tcout << endl;\n\t\n\treturn 0;\n}"
}