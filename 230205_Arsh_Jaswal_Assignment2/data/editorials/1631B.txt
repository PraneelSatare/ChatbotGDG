1631B - Fun with Even SubarraysAuthor: humbertoyusta Hint 1It is not possible to modify an using the given operation. Hint 2Think about the leftmost x such that ax≠an. SolutionFor simplicity, let b1,b2,...,bn=an,an−1,...,a1 (let b be a reversed). The operation transforms to select a subarray [l,r] of length 2⋅k, so k=r−l+12, then for all i such that 0≤i<k, set bl+k+i=bl+i.b1 can not be changed with the given operation. That reduces the problem to make all elements equal to b1.Let x be the rightmost index such that for all 1≤i≤x, bi=b1 holds.The problem will be solved when x=n.If an operation is applied with l+k>x+1, bx+1 will not change and x will remain the same.The largest range with l+k≤x+1 is [1,2⋅x], applying an operation to it will lead to bx+1,bx+2,...,b2⋅x=b1,b2,...,bx, so x will become at least 2⋅x and there is not any other range that will lead to a bigger value of x.If 2⋅x>n, it is possible to apply the operation on [x−(n−x)+1,n], after applying it bx+1,...,bn=bx−(n−x)+1,...,bx and all elements will become equal.The problem can now be solved by repeatedly finding x and applying the operation on [1,2⋅x] or on [x−(n−x)+1,n] if 2⋅x>n. Since x will become at least 2⋅x in each operation but the last one, the naive implementation will take O(nlogn), however, it is easy to implement it in O(n). Code O(nlogn)#include<bits/stdc++.h>
using namespace std;

int find_rightmost_x(vector<int> &b){
    int n = (int)b.size() - 1;

    int x = 1;
    while( x + 1 <= n && b[x+1] == b[1] )
        x ++;

    return x;
}

void apply(vector<int> &b,int l,int r){
    int k = ( r - l + 1 ) / 2;
    for(int i=0; i<k; i++)
        b[l+k+i] = b[l+i];
}

int main(){

    int tc;
    cin >> tc;
    while( tc-- ){

        int n;
        cin >> n;

        vector<int> a(n+1);
        for(int i=1; i<=n; i++)
            cin >> a[i];

        vector<int> b = a;
        reverse(b.begin()+1,b.end());

        int ans = 0;
        while( find_rightmost_x(b) != n ){
            int x = find_rightmost_x(b);
            if( 2 * x > n ){
                apply(b,x-(n-x)+1,n);
                ans ++;
            }
            else{
                apply(b,1,2*x);
                ans ++;
            }
        }
        cout << ans << '\n';
    }


    return 0;
} Code O(n)#include <bits/stdc++.h>
using namespace std;

int main()
{
    int tc;
    cin >> tc;
    while(tc--)
    {
        int n;
        cin >> n;

        vector<int> a(n+1);
        for(int i=1; i<=n; i++)
            cin >> a[i];

        vector<int> b = a;
        reverse(b.begin()+1,b.end());

        int ans = 0, x = 1;

        while( x < n )
        {
            if( b[x+1] == b[1] ){
                x ++;
                continue;
            }
            ans ++;
            x *= 2;
        }

        cout << ans << '\n';
    }

    return 0;
}