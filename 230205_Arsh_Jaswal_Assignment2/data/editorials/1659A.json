{
    "solution": "1659A - Red Versus BlueWe have b B's which divide the string into b+1 regions and we have to place the R's in these regions. By the strong form of the pigeonhole principle, at least one region must have at least ⌈rb+1⌉ R's. This gives us a lower bound on the answer.Now, we will construct a string whose answer is exactly equal to the lower bound.We place the B's so that they are not adjacent. Then we equally distribute the R's in the b+1 regions.Let p=⌊rb+1⌋ and q=rmod(b+1).We place p R's in each region and an extra R in any q regions. Hence, our answer for the construction is ⌈rb+1⌉, which is equal to the lower bound.Importantly, r>b, so none of the B's will be consecutive.Time complexity: O(n). Implementation (C++)#include<bits/stdc++.h>\nusing namespace std;\nusing lol=long long int;\n#define endl \"\\n\"\n \nint main()\n{\nios_base::sync_with_stdio(false);\ncin.tie(NULL);\nint _=1;\ncin>>_;\nwhile(_--)\n{\n    int n,r,b;\n    cin>>n>>r>>b;\n    int p=r/(b+1),q=r%(b+1);\n    for(int i=0;i<q;i++)    cout<<string(p+1,'R')<<'B';\n    for(int i=q;i<b;i++)    cout<<string(p,'R')<<'B';\n    cout<<string(p,'R');\n    cout<<endl;\n}\nreturn 0;\n} Implementation (Python)t = int(input())\nfor i in range(t):\n    n, r, b = map(int, input().split())\n    p = r % (b + 1)\n    y = \"\"\n    for j in range(int(r / (b + 1))):\n        y = y + \"R\"\n    ans = \"\"\n    for i in range(b + 1):\n        if i > 0:\n            ans = ans + \"B\"\n        ans = ans + y\n        if p > 0:\n            ans = ans + \"R\"\n            p = p - 1\n    print(ans) Feedback Good problem: \n\n\n\n\n367\n\n\n\n\n\n Average problem: \n\n    \n\n\n64\n\n\n\n Bad problem: \n\n    \n\n\n303\n\n\n\n Did not solve: \n\n    \n\n\n42\n\n\n\n "
}