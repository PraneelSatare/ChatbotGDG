1831B — Array MergingAuthor: tibinyte2006 HintsHint 1When we merge two arrays a and b, we can force the resulting array to have [al1,al1+1,…,ar1,bl2,bl2+1,…,br1] as a subarray, for some 1≤l1≤r1≤n and 1≤l2≤r2≤n. Hint 2If al1=bl1, then we can achieve a contiguous sequence of (r1−l1+1)+(r2−l2+1) equal elements in the resulting array. SolutionLet maxa(x) be the length of the longest subarray from a containing only elements equal to x. If x doesn't appear in a, then maxa(x)=0.Similarly, let maxb(x) be the length of the longest subarray from b containing only elements equal to x. If x doesn't appear in b, then maxb(x)=0.maxa and maxb can be computed in O(N) by scanning the array while updating current maximal subarray.When merging two arrays, it is possible to force a particular subarray [al1,al1+1,…,ar1] to be adjacent to another particular subarray [bl2,bl2+1,…,br2] in the merged array. ProofWe can construct the merged array as follows:  [a1,a2,…,al1−1]+[b1,b2,…,bl2−1]+[al1,al1+1,…,ar1,bl2,bl2+1,…,br2]+[…]If al1=bl2, then the merged array will have a subarray consisting of (r1−l1+1)+(r2−l2+1) equal elements.Therefore, the answer is equal to:  max2⋅ni=1(maxa(i)+maxb(i))Time complexity per testcase: O(N). Code (tibinyte, C++)#include <bits/stdc++.h>

using namespace std;

int32_t main()
{
    cin.tie(nullptr)->sync_with_stdio(false);
    int q;
    cin >> q;
    while (q--)
    {
        int n;
        cin >> n;
        vector<int> a(n + 1);
        vector<int> b(n + 1);
        for (int i = 1; i <= n; ++i)
        {
            cin >> a[i];
        }
        for (int i = 1; i <= n; ++i)
        {
            cin >> b[i];
        }
        vector<int> fa(n + n + 1);
        vector<int> fb(n + n + 1);
        int p = 1;
        for (int i = 2; i <= n; ++i)
        {
            if (a[i] != a[i - 1])
            {
                fa[a[i - 1]] = max(fa[a[i - 1]], i - p);
                p = i;
            }
        }
        fa[a[n]] = max(fa[a[n]], n - p + 1);

        p = 1;
        for (int i = 2; i <= n; ++i)
        {
            if (b[i] != b[i - 1])
            {
                fb[b[i - 1]] = max(fb[b[i - 1]], i - p);
                p = i;
            }
        }
        fb[b[n]] = max(fb[b[n]], n - p + 1);

        int ans = 0;
        for (int i = 1; i <= n + n; ++i)
        {
            ans = max(ans, fa[i] + fb[i]);
        }

        cout << ans << '\n';
    }
}
 Rate problemGood problem 

    


654



Ok problem 

    


114



Bad problem 

    


97



Didn't solve it, idk 

    


62



