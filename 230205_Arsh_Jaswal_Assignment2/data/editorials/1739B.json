{
    "solution": "1739B - Array RecoveryNote that ai=ai−1+di or ai=ai−1−di. Since there is no upper bound for the values of ai, the case where ai=ai−1+di for all i always exists. It remains to check if there are other ways. To do this, it is enough to check whether there is such a position pos that:   pos>1;  dpos≠0;  the change apos=apos−1+dpos to apos=apos−1−dpos doesn't result in a negative value of apos. The reason for dpos≠0 is that for dpos=0 no matter the plus or minus we choose, the array a doesn't change. If you could change at least one sign to minus, that would be another answer. Solution (Neon)for _ in range(int(input())):\n\tn = int(input())\n\tans = [0]\n\tfor x in map(int, input().split()):\n\t\tif x != 0 and ans[-1] - x >= 0:\n\t\t\tprint(-1)\n\t\t\tbreak\n\t\telse:\n\t\t\tans.append(ans[-1] + x)\n\telse:\n\t\tprint(*ans[1:])"
}