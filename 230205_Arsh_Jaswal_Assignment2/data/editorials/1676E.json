{
    "solution": "1676E - Eating QueriesLet's solve the problem with just one query. Greedily, we should pick the candies with the most sugar first, since there is no benefit to picking a candy with less sugar.So the solution is as follows: sort the candies in descending order, and then find the prefix whose sum is ≥x. This is O(n) per query, which is too slow for us.To speed it up, notice that we just need to find a prefix sum at least x. So if we compute the prefix sums of the reverse-sorted array, we need to find the first element that is at least x.Since all elements of a are positive, the array of prefix sums is increasing. Therefore, you can binary search the first element ≥x. This solves the problem in logn per query.Total time complexity: O(qlogn+n). Solution#include \"bits/stdc++.h\"\nusing namespace std;\n\nint main() {  \n    int t; cin >> t;\n    while(t--) {\n        int n, q; cin >> n >> q;\n        vector<long long> a(n), p(n);\n        for(int i = 0; i < n; ++i) {\n            cin >> a[i];\n        }\n        sort(a.rbegin(), a.rend());\n        for(int i = 0; i < n; ++i) {\n            p[i] = (i ? p[i - 1] : 0) + a[i];\n        }\n    \n        while(q--) {\n            long long x; cin >> x;\n            int l = 1, r = n, ans = -1;\n            while(l <= r) {\n                int mid = (l + r) / 2;\n                if(p[mid - 1] >= x) {\n                    ans = mid;\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            }\n            cout << ans << \"\\n\";\n        }\n    }\n}   "
}