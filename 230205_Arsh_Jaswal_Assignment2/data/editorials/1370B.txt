1370B - GCD CompressionKey Idea:It is always possible to form n−1 pairs of elements such that their gcd is divisible by 2.Solution:We can pair up the odd numbers and even numbers separately so that the sum of numbers in each pair is divisible by 2. Note that we can always form n−1 pairs in the above manner because in the worst case, we would discard one odd number and one even number from a. If we discarded more than one even or odd numbers, we could instead form another pair with even sum.Time Complexity: O(n) Code
#include < bits/stdc++.h >
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define int long long

const int N = 2e5 + 5;

int n;
int a[N];

int32_t main()
{
	IOS;
	int t;
	cin >> t;
	while(t--)
	{
		cin >> n;
		vector< int > even, odd;
		for(int i = 1; i <= 2 * n; i++)
		{
			cin >> a[i];
			if(a[i] % 2)
				odd.push_back(i);
			else
				even.push_back(i);
		}
		vector< pair< int, int > > ans;
		for(int i = 0; i + 1 < odd.size(); i += 2)
			ans.push_back({odd[i], odd[i + 1]});
		for(int i = 0; i + 1 < even.size(); i += 2)
			ans.push_back({even[i], even[i + 1]});
		for(int i = 0; i < n - 1; i++)
			cout << ans[i].first << " " << ans[i].second << endl;
	}
	return 0;
}This problem was prepared by Ashishgup and ridbit10