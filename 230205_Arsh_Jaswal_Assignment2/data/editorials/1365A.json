{
    "solution": "1365A - Matrix GameKey Idea:Vivek and Ashish can never claim cells in rows and columns which already have at least one cell claimed. So we need to look at the parity of minimum of the number of rows and columns which have no cells claimed initially.Solution:Let a be the number of rows which do not have any cell claimed in them initially and similarly b be the number of columns which do not have any cell claimed initially. Each time a player makes a move both a and b decrease by 1, since they only claim cells in rows and columns with no claimed cells. If either one of a or b becomes 0, the player whose turn comes next loses the game. Since both a and b decrease by 1 after each move, min(a,b) becomes 0 first. So, if min(a,b) is odd, Ashish wins the game otherwise Vivek wins.Time complexity: O(n⋅m) Code\n#include \nusing namespace std;\n \n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n#define endl \"\\n\"\n#define int long long\n\nconst int N = 51;\n\nint n, m;\nint a[N][N];\n\nint32_t main()\n{\n\tIOS;\n\tint t;\n\tcin >> t;\n\twhile(t--)\n\t{\n\t\tcin >> n >> m;\n\t\tset< int > r, c;\n\t\tfor(int i = 1; i <= n; i++)\n\t\t{\n\t\t\tfor(int j = 1; j <= m; j++)\n\t\t\t{\n\t\t\t\tcin >> a[i][j];\n\t\t\t\tif(a[i][j] == 1)\n\t\t\t\t\tr.insert(i), c.insert(j);\n\t\t\t}\n\t\t}\n\t\tint mn = min(n — r.size(), m — c.size());\n\t\tif(mn % 2)\n\t\t\tcout << \"Ashish\" << endl;\n\t\telse\n\t\t\tcout << \"Vivek\" << endl;\n\t}\n\treturn 0;\n}This problem was prepared by Ashishgup"
}