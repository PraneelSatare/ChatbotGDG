{
    "solution": "1023C - Bracket SubsequenceLet the array used of n boolean values describe if the corresponding bracket of string s is included in answer or not.The algorithm goes like this: iterate over the string from 1 to n, maintain the stack of positions of currenly unmatched opening brackets st. When opening bracket is met at position i, push i to st, and when closing bracket is met, set used[st.top()]=True, used[i]=True and pop the top of st. When k values are marked True in used then break, iterate from 1 to n and print the brackets at positions where used[i]=True.Obviously, this algorithm produces a subsequence of s of length k. Why will it be a regular bracket sequence? The requirements for it are:  no prefix contains more closing brackets than opening ones;  the total number of closing bracket equals the total number of opening brackets. The first requirement is met by construction, we couldn't pop more elements from the stack than it had. The second requirement is also met as we marked brackets in pairs.Overall complexity: O(n).Problem idea: MikeMirzayanov, prepared by: awoo. "
}