{
    "solution": "1827A - Counting OrdersIdea: Mike4235  Preparation: thenymphsofdelphi Hint 1Sort the array b, and fix the values from an to a1. SolutionFirst, we can sort the array b, as it does not change the answer.Let's try to choose the values of a from an to a1. How many ways are there to choose the value of ai?The new ai must satisfies ai>bi. But some of the candidates are already chosen as aj for some j>i. However, since aj>bj≥bi, we know that there are exactly (n−i) candidates already chosen previously by all values of j>i. So, there are (number of k such that ak>bi) −(n−i) ways to choose the value of ai.We can use two pointers or binary search to efficiently find the (number of k such that ak>bi) for all i.Time complexity: O(nlogn). Implementation#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int MOD = 1e9 + 7;\n\nstruct testcase{\n    testcase(){\n        int n; cin >> n;\n        vector<int> a(n);\n        for (int i=0; i<n; i++) cin >> a[i];\n        sort(a.begin(), a.end());\n        vector<int> b(n);\n        for (int i=0; i<n; i++) cin >> b[i];\n        sort(b.begin(), b.end(), greater<>());\n        ll result = 1;\n        for (int i=0; i<n; i++){\n            int geq_count = a.size() - (upper_bound(a.begin(), a.end(), b[i]) - a.begin());\n            result = result * max(geq_count - i, 0) % MOD;\n        }\n        cout << result << \"\\n\";\n    }\n};\n\nsigned main(){\n    cin.tie(0)->sync_with_stdio(0);\n    int t; cin >> t;\n    while (t--) testcase();\n}"
}