{
    "solution": "1606B - Update FilesLet cur be the current number of computers with the update already installed (initially it is 1). Then, in 1 hour, we can increase cur by min(cur,k). From here we can see that the value of cur will double for the first few hours, and then, when it becomes greater than k, it will begin to increase by exactly k.The process when the number of computers doubles can be modeled using a loop, because the number of doublings does not exceed logn. And after that, we have to increase the answer by ⌈n−curk⌉ to take the number of additions of k into account.Note that computing ⌈n−curk⌉ should be done without using fractional data types; to calculate ⌈xy⌉ in integers, you should divide x+y−1 by y using integer division (this will work provided that both x and y are non-negative, and y≠0). If you use real numbers, this may cause precision issues. Solution (Neon)#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing li = long long;\n\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL); \n  int t;\n  cin >> t;\n  while (t--) {\n    li n, k;\n    cin >> n >> k;\n    li ans = 0, cur = 1;\n    while (cur < k) {\n      cur *= 2;\n      ++ans;\n    }\n    if (cur < n) ans += (n - cur + k - 1) / k;\n    cout << ans << '\\n';\n  }\n}"
}