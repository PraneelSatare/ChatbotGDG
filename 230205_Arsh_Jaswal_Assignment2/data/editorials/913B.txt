913B - Christmas SpruceLets calculate amount of children for each vertex. To do that lets increase by 1 c[pi] for every pi. Then iterate over all vertexes. If i-th vertex has 0 children (i.e. c[i] = 0), skip this vertex. Else again iterate over all vertexes and calculate number of vertexes j such that c[j] = 0 and pj = i. If this number is lower than 3, answer is "No". Else answer is "Yes". C++ solution#include <bits/stdc++.h>

using namespace std;

int main() {
  int n;
  cin >> n;
  vector<int> p(n), deg(n);
  for (int i = 1; i < n; i++) {
    cin >> p[i];
    p[i]--;
    deg[p[i]]++;
  }
  vector<int> sons_leaves(n);
  for (int i = 0; i < n; i++) {
    if (deg[i] == 0) {
      sons_leaves[p[i]]++;
    }
  }
  for (int i = 0; i < n; i++) {
    if (deg[i] > 0 && sons_leaves[i] < 3) {
      puts("No");
      return 0;
    }
  }
  puts("Yes");
  return 0;
} Python solutionn = int(input())
p = [int(input()) - 1 for _ in range(n - 1)]
leafs = list(filter(lambda x: not x in p, range(n)))
lp = [x for i, x in enumerate(p) if i + 1 in leafs]
x = min(lp.count(k) for k in p)
print("Yes" if x >= 3 else "No") Party LemonadeProblem writer: tourist 