{
    "solution": "1593D1 - All are Samek can be arbitrarily large if and only if all numbers in the array are the same. In this case, we can choose any number k and subtract it from all the numbers, for example, exactly once.Suppose we fix some k. Let qi be the number of subtractions of the number k from the number ai. In this case, all numbers will be equal if and only if, for any two numbers ai and aj from the array, ai−k⋅qi=aj−k⋅qj. Let qi0 be the minimum of qi. Then all numbers in the array become the same if for each index i we subtract from ai k not qi, but qi−qi0 times. Then we will never subtract k from the element ai0. This means that there is always an element in the array from which we can never subtract k. This element is the minimum on the array. Then from ai we will subtract k exactly ai−ai0k times.Thus, with the current k, it is possible to make all elements equal if and only if for all elements ai the value ai−ai0 (where ai0 is the minimum on the array) is divisible by k. So, the maximum k is the greatest common divisor of all values of ai−ai0, i=1,n¯¯¯¯¯¯¯¯. Solution#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\tint t;\n\tcin >> t;\n\n\twhile (t--)\n\t{\n\t\tint n;\n\t\tcin >> n;\n\n\t\tvector<int> a(n);\n\t\tfor (int i = 0; i < n; i++) cin >> a[i];\n\n\t\tbool inf = true;\n\t\tint minval = a[0];\n\n\t\tfor (int i = 1; i < n; i++)\n\t\t{\n\t\t\tif (a[i] != a[0])\n\t\t\t{\n\t\t\t\tinf = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tminval = min(minval, a[i]);\n\t\t}\n\n\t\tif (inf)\n\t\t{\n\t\t\tcout << \"-1\\n\";\n\t\t\tcontinue;\n\t\t}\n\n\t\tsort(a.begin(), a.end());\n\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tans = gcd(ans, a[i] - minval);\n\t\tcout << ans << '\\n';\n\t}\n\n\treturn 0;\n}\n"
}