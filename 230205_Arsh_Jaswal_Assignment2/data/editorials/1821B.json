{
    "solution": "1821B - Sort the SubarrayLet's find the leftmost and the rightmost position in which the arrays a and a′ differ. Since only the elements in the chosen subsegment might change, the subarray we sorted should contain these two positions.Let's start with the subarray from the leftmost \"different\" position to the rightmost one, and then expand it to get the longest subarray which meets the conditions. Suppose we want to expand it to the left. Let the current left border be L; how to decide if we can make it L−1 or less? If a′L<aL−1, then we cannot include L−1 in the subarray we sort, since otherwise the order of these two elements would have changed. Otherwise, aL−1 is not greater than any element in the subarray we have chosen, so we can include it and reduce L by 1. We do this until it's impossible to reduce L further.The same goes for the right border: we expand it to the right until we find an element which is less than the previous element, and we cannot include this element in the subarray. Solution (BledDest)#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\tfor(int i = 0; i < t; i++)\n\t{\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector<int> a(n);\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tscanf(\"%d\", &a[i]);\n\t\tvector<int> a1(n);\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tscanf(\"%d\", &a1[i]);\n\t\tint diffl = -1, diffr = -1;\n\t\tfor(int j = 0; j < n; j++)\n\t\t{\n\t\t\tif(a[j] != a1[j])\n\t\t\t{\n\t\t\t\tdiffr = j;\n\t\t\t\tif(diffl == -1)\n\t\t\t\t\tdiffl = j;\n\t\t\t}\n\t\t}\n\t\twhile(diffl > 0 && a1[diffl - 1] <= a1[diffl])\n\t\t\tdiffl--;\n\t\twhile(diffr < n - 1 && a1[diffr + 1] >= a1[diffr])\n\t\t\tdiffr++;\n\t\tprintf(\"%d %d\\n\", diffl + 1, diffr + 1);\n\t}\n}\n"
}