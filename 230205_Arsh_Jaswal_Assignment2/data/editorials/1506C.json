{
    "solution": "1506C - Double-ended StringsRegarding to the small constraints, in this problem you could iterate over how many characters were removed by each type of operation. If l characters at the beginning and x characters at the end are removed from the string s, then the substring s[l+1,n−x] remains, where n — is the length of the string s.There is also a fast solution to this problem using dynamic programming. Solution#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n\nvoid solve() {\n    string a, b;\n    cin >> a >> b;\n    int n = a.size(), m = b.size();\n    int ans = 0;\n    for (int len = 1; len <= min(n, m); len++) {\n        for (int i = 0; i + len <= n; i++) {\n            for (int j = 0; j + len <= m; j++) {\n                if (a.substr(i, len) == b.substr(j, len)) {\n                    ans = max(ans, len);\n                }\n            }\n        }\n    }\n    cout << a.size() + b.size() - 2 * ans << \"\\n\";\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr); cout.tie(nullptr);\n    int n;\n    cin >> n;\n    while (n--) {\n        solve();\n    }\n}"
}