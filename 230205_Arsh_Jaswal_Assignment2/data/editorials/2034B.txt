2034B - Rakhsh's RevivalIdea: MohammadParsaElahimanesh and AmirrzwM â€” Preparation: AmShZ SolutionWe will solve the problem using the following approach:  Start from the leftmost spot and move rightwards. Whenever a consecutive segment of m weak spots (i.e., 0's) is found, apply Timar to a segment of length k, starting from the last index of the weak segment. Repeat this process until no segment of m consecutive weak spots remains. The key idea behind this solution is that whenever we encounter a block of m consecutive 0's, we need to strengthen it. Since we can apply Timar to a segment of length k, the optimal strategy is always to apply Timar starting at the last index of the block of m consecutive 0's.Correctness Proof:  For any block of m consecutive 0's, we must apply Timar to at least one index within this block. Hence, the strengthened segment of length k must overlap with the block of weak spots. Suppose an optimal solution exists where Timar is applied to a segment starting leftward within the block. Suppose we shift this segment one step to the right (closer to the end of the block). In that case, the solution remains valid and optimal since it covers all weak spots in the block while reducing unnecessary overlap with already-strengthened areas. By always starting from the last index of a block of m consecutive 0's, this greedy strategy ensures that Timar is used in the minimum number of applications, making it correct and efficient. Implementation# include <bits/stdc++.h>

using namespace std;

const int xn = 2e5 + 10;

int q, n, m, k, ps[xn];
string s;

int main() {
    cin >> q;
    while (q --) {
        cin >> n >> m >> k >> s;
        fill(ps, ps + n, 0);
        int ans = 0, cnt = 0, sum = 0;
        for (int i = 0; i < n; ++ i) {
            sum += ps[i];
            if (sum || s[i] == '1') cnt = 0;
            else {
                cnt++;
                if (cnt == m) {
                    sum++, ans++, cnt = 0;
                    if (i + k < n) ps[i + k]--;
                }
            }
        }
        cout << ans << "\n";
    }
}