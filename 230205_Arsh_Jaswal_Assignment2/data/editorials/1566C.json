{
    "solution": "1566C - MAX-MEX Cut First solutionHint 1You can cut out the columns with both 0 and 1. Hint 2Now in each column there are only 0 or only 1. We only need to solve the problem for a string because the columns can be replaced by one digit (they consist of equal elements). Hint 3Let's be greedy, to each zero we will \"join\" not more than one 1. EditorialLet's solve the same problem but for a string:It's needed to cut a binary string into segments so that each its element is in exactly one segment and the sum of MEX for all segments is maximal.Initially we will say that the string is cut into segments of length 1. Then the answer is the number of zeroes in the string. After that the answer is increased every time we merge a segment of 0 with a segment of 1. Each such merge increases the answer by 1. Let's make the merges greedily, maximizing the number of merges. Let's consider the first zero. If the previous element is a 1, let's merge them and consider the next zero. Else, if the next element is a 1, let's merge them and consider the next zero. Else, the next element is a zero and we should consider it instead of the current zero the same way. By doing so we get the answer as the number of zeroes + the number of merges.Now let's solve the initial problem. We can cut out the columns that contain both 0 and 1, because their MEX is already maximized and the answer will not become worse.Now we solve the problem for all remaining bi-tables independently. Each their column consists either only of 0 or only of 1 so both rows are equal. We will solve the problem for one row of each remaining bi-table as mentioned before and then sum up the values to get the answer. Implementation (C++, shishin)#include <bits/stdc++.h>\nusing namespace std;\n\nint solve(string s) {\n    int ans = count(s.begin(), s.end(), '0');\n    int n = s.size();\n    bool a = false, b = false;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '0') a = true;\n        if (s[i] == '1') b = true;\n        if (a && b) {\n            ++ans;\n            a = b = false;\n        }\n    }\n    return ans;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int T;\n    cin >> T;\n    while (T --> 0) {\n        int n, ans = 0;\n        string a, b;\n        cin >> n >> a >> b;\n        string s = \"\";\n        for (int i = 0; i < n; ++i) {\n            if (a[i] != b[i]) {\n                ans += 2 + solve(s);\n                s = \"\";\n            } else {\n                s += a[i];\n            }\n        }\n        cout << ans + solve(s) << '\\n';\n    }\n    return 0;\n} Second solution (two similar solutions)This problem could be solved in many ways using the dp. We will consider these solutions in short.Let's say that dpi — is the answer for a prefix until i. Then there are different approaches:We can calculate the dp values, iterating through all possible MEX values on the last segment. For example, if we want to make MEX equal 2 on the last segment, then we need to find the closest 0 and the closest 1 to position i. Let it be last0 and last1. Then we should recalc the dp like this dpi=max(dpi,dpj−1+2), where j=min(last0,last1), because we take the shortest segment ending in i which has both 0 and 1 and after that we add the answer for this segment and for prefix that ends in j−1. Implementation(C++, kpw29)#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i, l, r) for(int i = (l); i <= (r); ++i)\n#define rep(i, l, r) for(int i = (l); i < (r); ++i)\ntypedef vector<int> vi;\n\n//Did you REAALLY consider sample tests?\nvoid solve(int tc) {\n    string s[2];\n    int n;\n    cin >> n;\n    cin >> s[0] >> s[1];\n    vi dp(n + 1, 0);\n    vi last(2, -1);\n    \n    auto take = [&](int i, bool take0, bool take1) {\n        int MEX = 0;\n        if (take0) {\n            if (take1) MEX = 2;\n            else MEX = 1;\n        }\n        \n        int index = i;\n        if (take0) index = min(index, last[0]);\n        if (take1) index = min(index, last[1]);\n        \n        if (index != -1) return MEX + dp[index - 1];\n        return -100000;\n    };\n    \n    FOR(i, 1, n) {\n        vi val(2);\n        rep(j, 0, 2) last[s[j][i-1] - '0'] = i;\n        dp[i] = dp[i-1];\n        dp[i] = max(dp[i], take(i, 1, 0));\n        dp[i] = max(dp[i], take(i, 0, 1));\n        dp[i] = max(dp[i], take(i, 1, 1));\n    }\n    \n    cout << dp[n] << \"\\n\";\n}\n \nint main() {\n    int tests;\n    cin >> tests;\n    FOR(test, 1, tests) {\n        solve(test);\n    }\n}Another possible solution with dp is based on the fact that we should not take any segments with length more than x, where x is some small number. We can just take some random big enough x and not prove anything. There exists a solution which does not consider segments with length bigger than 5. Implementation (C++, physics0523)#include<bits/stdc++.h>\n \nusing namespace std;\n \nint mex(string s){\n  int fl=0;\n  for(auto &nx : s){\n    if(nx=='0'){fl|=1;}\n    else if(nx=='1'){fl|=2;}\n  }\n  if(fl==3){return 2;}\n  if(fl==1){return 1;}\n  return 0;\n}\n \nint main(){\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int t;\n  cin >> t;\n  while(t>0){\n    t--;\n    int n;\n    string s1,s2;\n    cin >> n >> s1 >> s2;\n    vector<int> dp(n+1,0);\n    for(int i=0;i<n;i++){\n      string s;\n      for(int j=0;j<5;j++){\n        if(i+j>=n){break;}\n        s.push_back(s1[i+j]);\n        s.push_back(s2[i+j]);\n        dp[i+j+1]=max(dp[i+j+1],dp[i]+mex(s));\n      }\n    }\n    cout << dp[n] << '\\n';\n  }\n  return 0;\n} D: Seating Arrangements"
}