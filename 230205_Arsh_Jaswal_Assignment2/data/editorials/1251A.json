{
    "solution": "1251A - Broken KeyboardIf a key malfunctions, each sequence of presses of this key gives a string with even number of characters. So, if there is a substring consisting of odd number of equal characters c, such that it cannot be extended to the left or to the right without adding other characters, then it could not be produced by presses of button c if c was malfunctioning.The only thing that's left is to find all maximal by inclusion substrings consisting of the same character. Solution (Ne0n25)#include <bits/stdc++.h>\n\nusing namespace std;\n\nbool ans[26];\n\nvoid solve() {\n\tstring s;\n\tcin >> s;\n\t\n\tmemset(ans, 0, sizeof(ans));\n\t\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tint j = i;\n\t\twhile (j + 1 < s.size() && s[j + 1] == s[i])\n\t\t\tj++;\n\t\tif ((j - i) % 2 == 0)\n\t\t\tans[s[i] - 'a'] = true;\n\t\ti = j;\n\t}\n\t\n\tfor (int i = 0; i < 26; i++) if (ans[i])\n\t\tcout << char('a' + i);\n\tcout << endl;\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\twhile (q--) solve();\n}"
}