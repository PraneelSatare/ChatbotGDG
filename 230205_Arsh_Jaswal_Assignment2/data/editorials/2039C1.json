{
    "solution": "2039C1 - Shohag Loves XOR (Easy Version)THOUGHT: Here x>0 and y>0. So x⊕y is neither equal to x nor y. So x⊕y is a divisor of x or y and x⊕y<x or x⊕y<y.OBSERVATION: Any divisor d of p such that d<p we know that d≤⌊p2⌋. Also, the highest bits of d and p are different when d≤⌊p2⌋.THOUGHT: Wait but x⊕y has the same highest bit as y if y≥2⋅x.CONCLUSION: So if y≥2⋅x, then x⊕y can not be a divisor of y.THOUGHT: But can it be a divisor of x?OBSERVATION: If y≥2⋅x, then x⊕y>x because the highest bit in x⊕y is greater than that in x. So x⊕y can not be a divisor of x.CONCLUSION: If y≥2⋅x, then x⊕y can not be a divisor of x or y. So no solution in this case.THOUGHT: Now we need to consider the case when y<2⋅x. But x is small in this problem, making it feasible to iterate over all possible values of y.ACTION: Iterate over all possible values of y<2⋅x and check if x⊕y is a divisor of either x or y.Time Complexity: O(x). Code#include<bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long;\n\nvoid solve() {\n  int x; ll m; cin >> x >> m;\n\n  int ans = 0;\n  for (int y = 1; y <= min(2LL * x, m); y++) {\n    if (x != y and ((x % (x ^ y)) == 0 or (y % (x ^ y) == 0))) {\n      ++ans;\n    }\n  }\n  cout << ans << '\\n';\n}\n\nint32_t main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  int t = 1;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n  return 0;\n} Rate the Problem Amazing problem: \n\n    \n\n\n264\n\n\n\n Good problem: \n\n    \n\n\n81\n\n\n\n Average problem: \n\n    \n\n\n37\n\n\n\n Bad problem: \n\n    \n\n\n58\n\n\n\n Didn't solve: \n\n    \n\n\n29\n\n\n\n "
}