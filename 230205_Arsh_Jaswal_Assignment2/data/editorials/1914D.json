{
    "solution": "1914D - Three ActivitiesThe main idea of the problem is that almost always you can take the maximum in each array. And when you can't, you don't need to look at a lot of smaller numbers. In particular, it is enough to consider the three largest numbers from each array.Let's show the correctness of this for the first array. There always exists an optimal answer in which one of the three largest numbers is taken from array a. Let's fix some taken elements in arrays b and c. Then at least one of the three positions of the largest elements in a is different from both fixed position.The argument is generalized to all three arrays similarly.Thus, the solution looks as follows. Find the positions of the three maximums in each array and iterate over the answer in 33. Finding three maximums can be done using sorting or in one linear time pass over the array. Solution (awoo)for _ in range(int(input())):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\tc = list(map(int, input().split()))\n\t\n\tdef get_best3(a):\n\t\tmx1, mx2, mx3 = -1, -1, -1\n\t\tfor i in range(len(a)):\n\t\t\tif mx1 == -1 or a[i] > a[mx1]:\n\t\t\t\tmx3 = mx2\n\t\t\t\tmx2 = mx1\n\t\t\t\tmx1 = i\n\t\t\telif mx2 == -1 or a[i] > a[mx2]:\n\t\t\t\tmx3 = mx2\n\t\t\t\tmx2 = i\n\t\t\telif mx3 == -1 or a[i] > a[mx3]:\n\t\t\t\tmx3 = i\n\t\treturn (mx1, mx2, mx3)\n\t\n\tans = 0\n\tfor x in get_best3(a):\n\t\tfor y in get_best3(b):\n\t\t\tfor z in get_best3(c):\n\t\t\t\tif x != y and x != z and y != z:\n\t\t\t\t\tans = max(ans, a[x] + b[y] + c[z])\n\tprint(ans)"
}