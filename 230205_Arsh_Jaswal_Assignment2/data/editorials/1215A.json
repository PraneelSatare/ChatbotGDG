{
    "solution": "1215A - Yellow CardsAt first, if k1>k2, then we swap k1 with k2 and a1 with a2, so the number of yellow cards required to send a player of the first team off is not greater than the same value for the second team. If all players from the first team receive k1−1 cards each and all players from the second team receive k2−1 cards each, we will minimize the number of players who left the game. Let cnt=a1⋅(k1−1)+a2⋅(k2−1). If cnt≤0, then the minimum number of players who left the game is equal to 0. In the other case, if any player receivse one more yellow card, he leaves the game. So the minimum number of players who left the game is (n−cnt).When we maximize the number of players who left the game, at first we should give cards to players in the first team, and then give cards to players in the second team. So, if n≤a1⋅k1, the answer is ⌊nk1⌋. In the other case, the answer is a1+⌊n−a1⋅k1k2⌋.  Solution (fcspartakm)#include <bits/stdc++.h>\n\nusing namespace std;\n\nint a1, a2, k1, k2, n;\n\ninline void read() {\n\tcin >> a1 >> a2 >> k1 >> k2 >> n;\t\n}\n\ninline void solve() {\n\tif (k1 > k2) {\n\t\tswap(k1, k2);\n\t\tswap(a1, a2);\n\t}\n\tint minCnt = max(0, n &mdash; a1 * (k1 &mdash; 1) &mdash; a2 * (k2 &mdash; 1));\n\tint maxCnt = 0;\n\tif (n <= a1 * k1) {\n\t\tmaxCnt = n / k1;\n\t} else {\n\t\tmaxCnt = a1 + (n &mdash; a1 * k1) / k2;\n    }    \n    cout << minCnt << ' ' << maxCnt << endl;\n}\n\nint main () {\n#ifdef fcspartakm\n    freopen(\"input.txt\", \"r\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n#endif\n    srand(time(NULL));\n    cerr << setprecision(10) << fixed;\n    \n    read();\n    solve();\n \n    //cerr << \"TIME: \" << clock() << endl;\n}"
}