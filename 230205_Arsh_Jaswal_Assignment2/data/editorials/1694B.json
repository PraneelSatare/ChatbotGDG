{
    "solution": "1694B - Параноидальная строкаWe want to show that a binary string T of length m is paranoid if and only if m=1 or (1<m and S[m]≠S[m−1]). In the case of S[m−1]=S[m]: We can never delete the last two characters because they will always remain equal. So S is not paranoid. In the case of S[m−1]≠S[m]: If m=2, we can reach our goal by one operation. Otherwise assume that the last character is 0. Now the last three characters are either 010 or 110. In the first case perform the operation on [Sm−2,Sm−1] and in the second case perform the operation on [Sm−1,Sm]. Then the last two characters will be 10 and we can continue this algorithm on the new string until we reach m=1.The number of paranoid substrings of length 1 is equal to n. To count the number of longer substrings, we can fix r from index 2 to n. if S[r]≠S[r−1] holds, we should add r−1 to the answer.complexity: O(n) Implementation# include <bits/stdc++.h>\n\nusing namespace std;\n\nint t, n;\nstring S;\nlong long ans;\n\nint main(){\n\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\n\tcin >> t;\n\twhile (t --){\n\t\tcin >> n >> S, ans = n;\n\t\tfor (int i = 1; i < n; ++ i)\n\t\t\tif (S[i] != S[i - 1])\n\t\t\t\tans += i;\n\t\tcout << ans << '\\n';\n\t}\n\n\treturn 0;\n}"
}