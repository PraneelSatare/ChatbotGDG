{
    "solution": "1793C - Dora and SearchSuppose we want to check whether the entire array satisfies the claim. If this is the case, then we can output the entire array as an answer. Otherwise, one of the two extreme elements does not meet our requirements. From this we can conclude that all segments containing an element that does not meet our requirements will also be incorrect, because this extreme element will remain the minimum/maximum.The algorithm follows from the fact above: let's look at the sub-section [l;r], which is initially equal to [1;n]. If al=min(al,al+1,…,ar) or al=max(al,al+1,…,ar), then we proceed to the segment [l+1;r]. A similar reasoning is also needed for ar. Thus, either after some iterations we will get the required sub-section, or we will get l==r and the answer will be −1.Final asymptotics: O(nlogn) or O(n) depending on the implementation. Code#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef vector<int> vi;\n\nvoid solve() {\n    int n;\n    cin >> n;\n    vi a(n);\n    for (int &i: a)\n        cin >> i;\n    int l = 0, r = n - 1;\n    int mn = 1, mx = n;\n    while (l <= r) {\n        if (a[l] == mn) {\n            l++;\n            mn++;\n        } else if (a[l] == mx) {\n            l++;\n            mx--;\n        } else if (a[r] == mn) {\n            r--;\n            mn++;\n        } else if (a[r] == mx) {\n            r--;\n            mx--;\n        } else {\n            break;\n        }\n    }\n    if(l <= r){\n        cout << l + 1 << \" \" << r + 1 << endl;\n    } else{\n        cout << -1 << endl;\n    }\n}\n\nsigned main() {\n    int q = 1;\n    cin >> q;\n    while (q--)\n        solve();\n    return 0;\n}"
}