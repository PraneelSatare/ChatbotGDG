1783B - Matrix of DifferencesThe first step is to notice that beauty doesn't exceed n2−1, because the minimum difference between two elements is at least 1, and the maximum difference does not exceed n2−1 (the difference between the maximum element n2 and the minimum element 1).At first, finding a matrix with maximum beauty seems to be a quite difficult task. So let's try to find an array of n2 elements of maximum beauty. In this case, it is not difficult to come up with an array of the form [n2,1,n2−1,2,n2−2,3,…]. In such an array, there are all possible differences from 1 to n2−1. So we found an array with the maximum possible beauty.It remains to find a way to "convert" the array to the matrix, i.e. to find such a sequence of matrix cells that each two adjacent cells in it are side-adjacent. One of the ways is the following: traverse the first row of the matrix from left to right, go down to the second row, traverse it from right to left, go down to the third row, traverse it from left to right, and so on.Thus, we constructed a matrix with the maximum possible beauty n2−1. Solution (Neon)#include <bits/stdc++.h>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<vector<int>> a(n, vector<int>(n));
    int l = 1, r = n * n, t = 0;
    forn(i, n) {
      forn(j, n) {
        if (t) a[i][j] = l++;
        else a[i][j] = r--;
        t ^= 1;
      }
      if (i & 1) reverse(a[i].begin(), a[i].end());
    }
    forn(i, n) forn(j, n) cout << a[i][j] << " \n"[j == n - 1];
  }
}