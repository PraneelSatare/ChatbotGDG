{
    "solution": "1472D - Even-Odd GameLet's look at an analogy for this game.   If Alice takes an even number x, she adds x points to the global result, otherwise 0;  If Bob takes an odd number x, he adds −x points to the global result, otherwise 0;  Alice wants to maximize the global result and Bob wants to minimize it. Obviously, this game is completely equivalent to the conditional game.Suppose now it's Alice's move. Let's look at some number x in the array.   If this number is even, then taking it will add x points, and giving it to Bob will add 0 points.  If this number is odd, then taking it will add 0 points, and giving it to Bob will add −x points. So taking the number x by x points is more profitable than not taking it (regardless of the parity). To maximize the result, Alice should always take the maximum number in the array.Similar reasoning can be done for Bob. In the task, it was necessary to sort the array and simulate the game. Solution#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<int> v(n);\n  for (int &e : v) {\n    cin >> e;\n  }\n  sort(v.rbegin(), v.rend());\n  ll ans = 0;\n  for (int i = 0; i < n; i++) {\n    if (i % 2 == 0) {\n      if (v[i] % 2 == 0) {\n        ans += v[i];\n      }\n    } else {\n      if (v[i] % 2 == 1) {\n        ans -= v[i];\n      }\n    }\n  }\n  if (ans == 0) {\n    cout << \"Tie\\n\";\n  } else if (ans > 0) {\n    cout << \"Alice\\n\";\n  } else {\n    cout << \"Bob\\n\";\n  }\n}\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n  return 0;\n}"
}