1811C - Restore the ArrayTo solve the problem, you can build an array a as follows   a1=b1  ai=min(bi−1,bi) at 2≤i≤n−1  an=bn−1 Let's show that from the constructed array a we can get an array B equal to the original array b:   B1=max(a1,a2)=max(b1,min(b1,b2))   If b1>b2, then max(b1,b2)=b1  If b2≥b1, then max(b1,b1)=b1 So B1=b1 Bi=max(ai,ai+1)=max(min(bi−1,bi),min(bi,bi+1)) at 2≤i≤n−2  If bi+1≥bi and bi−1≥bi, then max(min(bi−1,bi),min(bi,bi+1)=min(bi,bi)=bi  If bi+1≥bi≥bi−1, then max(bi−1,bi)=bi  If bi−1≥bi≥bi+1, then max(bi,bi+1)=bi By the construction of the array b it is not possible that bi>bi+1 and bi>bi−1. So Bi=bi  Bn−1=max(an−1,an)=max(min(bn−2,bn−1),bn−1)   If bn−2>bn−2, then max(bn−1,bn−1)=bn−1  If bn−1≥bn−2, then max(bn−2,bn−1)=bn−1  So Bn−1=bn−1 We get that Bi=bi for 1≤i≤n−1, so B=b and array a is built correctly. Solution#include "bits/stdc++.h"
using namespace std;

void solve(){
    int n;
    cin >> n;
    vector<int>b(n-1), a;
    for(int i = 0; i < n - 1; i++) cin >> b[i];
    a.emplace_back(b[0]);
    for(int i = 0; i < n - 2; i++){
        a.emplace_back(min(b[i], b[i + 1]));
    }
    a.emplace_back(b[n - 2]);
    for(auto &i : a) cout << i << ' ';
    cout << "\n";
}
int main(){
    int t;
    cin >> t;
    while(t--){
        solve();
    }
    return 0;
}