{
    "solution": "1948B - Array FixThe key to solving the problem is the following observation: if ai>ai+1, then the i-th element should always be split (since it is the only way to decrease the element compared with ai+1).This observation allows us to solve the problem greedily as follows: iterate on the array a from right to left, keeping track of the list of elements we processed; if the current element is greater than the last element in our list, we have to split it (and add the digits it consists of to the list); otherwise, we don't have to split it (because it might forbid some of the next elements and force them to split as well).After that, we have to make sure we obtained a sorted array (because, for example, a number like 98 will break the sorted order if we split it, and we didn't check that). But since we maintained the list of elements we processed, that's quite easy, because that list is the resulting array a in reversed order. Solution (Neon)#include <bits/stdc++.h>\n \nusing namespace std;\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (auto& x : a) cin >> x;\n    vector<int> b({a[n - 1]});\n    for (int i = n - 2; i >= 0; --i) {\n      if (a[i] > b.back()) {\n        b.push_back(a[i] % 10);\n        b.push_back(a[i] / 10);\n      } else {\n        b.push_back(a[i]);\n      }\n    }\n    cout << (is_sorted(b.rbegin(), b.rend()) ? \"YES\" : \"NO\") << '\\n';\n  }\n}"
}