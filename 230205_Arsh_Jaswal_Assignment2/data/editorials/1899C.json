{
    "solution": "1899C — Yarik and ArrayIdea: meowcneil, development: meowcneil. EditorialThere are \"bad\" positions in the array, i.e., those on which two numbers of the same parity are next to each other. Note that all matching segments cannot contain such positions, in other words, we need to solve the problem of finding a sub segment with maximal sum on some number of non-intersecting sub segments of the array, the boundaries of which are between two neighboring elements of the same parity.The problem of finding a sub segment with maximal sum can be solved using the classical algorithm with keeping minimal prefix sum on the prefix. The problem can be solved in a single pass over the array by simply dropping the keeped values when we are in a bad position.Total complexity — O(n). Solution#include <iostream>\n#include <vector>\n#include <algorithm>\n \nusing namespace std;\n \nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    int ans = a[0];\n    int mn = min(0, a[0]), sum = a[0];\n    for (int i = 1; i < n; ++i) {\n        if (abs(a[i] % 2) == abs(a[i - 1] % 2)) {\n            mn = 0;\n            sum = 0;\n        }\n        sum += a[i];\n        ans = max(ans, sum - mn);\n        mn = min(mn, sum);\n    }\n    cout << ans << endl;\n}\n \nint main() {\n    int tc = 1;\n    cin >> tc;\n    for (int t = 1; t <= tc; t++) {\n        solve();\n    }\n}"
}