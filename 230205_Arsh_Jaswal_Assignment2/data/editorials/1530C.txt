1530C - PursuitThe first thing to notice is that since we're chasing Ilya and we want to reach his score as soon as possible, it only makes sense to add 100's to our scores and 0's to his.We can also notice that the answer never exceeds n. No matter how bad a stage is for us in terms of points, adding a single stage where we score 100 and Ilya scores 0 "compensates" it. In particular, in the worst case, when all ai=0 and all bi=100, the answer is exactly n.However, if we just add the 100/0 stages one-by-one and calculate the overall results from scratch every time, our solution will have O(n2) complexity and that's too much.There are many ways to optimize the solution.One of them is to transform the given a and b arrays into arrays of length 101, containing the count of each score (since we are not interested in the order of the scores). Let m=100 be the maximum achievable score in a stage. Using the transformed arrays, we can calculate the overall scores in O(m) instead of O(n), to lower the final complexity to O(mn).Alternatively, notice that when we add 100 to our scores, it just adds 100 to our overall score except for the case when the total number of completed stages becomes divisible by 4, when we also need to subtract the score of the worst currently included stage from the sum. We can similarly handle adding 0 to Ilya's scores. If we sort all our and Ilya's scores at the beginning and maintain a pointer to the current worst included stage in both scoresheets, we can add a new 100/0 stage and recalculate the totals in O(1).Finally, we can also notice that whenever adding k stages works for us, adding k+1 stages will work too. Thus, we can use binary search on k. We can easily check a single value of k in O(n) or O(nlogn), resulting in O(nlogn) or O(nlog2n) time complexity. 