{
    "solution": "2027B - Stalin SortAn array is vulnerable if and only if the first element is the largest. To prove the forward direction, we can trivially perform a single operation on the entire range, which will clearly make it non-increasing. Now, let's prove the reverse direction. Consider any array in which the maximum is not the first element. Note that a Stalin Sort on any subarray will never remove the first element, and also will never remove the maximum. So if the first is not the maximum, this will always break the non-increasing property.Therefore, we just need to find the longest subsequence in which the first element is the largest. This can be done easily in O(n2) — consider each index being the first item in the subsequence, and count all items to the right of it which are smaller or equal to it. Find the maximum over all of these, then subtract this from n.Bonus: Solve this task in O(nlogn). Code#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    cin.tie(0)->sync_with_stdio(0);\n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        cin >> n;\n        vector<int> A(n);\n        for (int i=0; i<n; i++) cin >> A[i];\n        int best = 0;\n        for (int i=0; i<n; i++) {\n            int curr = 0;\n            for (int j=i; j<n; j++) {\n                if (A[j] <= A[i]) {\n                    curr += 1;\n                }\n            }\n            best = max(best, curr);\n        }\n        cout << n - best << \"\\n\";\n    }\n  return 0;\n}"
}