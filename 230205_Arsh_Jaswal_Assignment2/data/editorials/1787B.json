{
    "solution": "1787B - Number FactorizationFirst, apii is equivalent to the product of a1i for p times, so it is sufficient to set all pi to 1.Decomposite n to some prime factors, greedily choose the most number of distinct prime numbers, the product is the maximum. Solution#include <bits/stdc++.h>\nusing namespace std;\n#define mp make_pair\npair<int, int> s[110];\nint d[110];\nvoid get() {\n\tint n, l = 0, i, c;\n\tcin >> n;\n\tfor (i = 2; i * i <= n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tc = 0;\n\t\t\twhile (n % i == 0) c++, n /= i;\n\t\t\ts[++l] = make_pair(c, i);\n\t\t}\n\t}\n\tif (n != 1) s[++l] = make_pair(1, n);\n\tsort(s + 1, s + l + 1), d[l + 1] = 1;\n\tfor (i = l; i >= 1; i--) d[i] = d[i + 1] * s[i].second;\n\tint ans = 0;\n\tfor (i = 1; i <= l; i++) if (s[i].first != s[i - 1].first) ans += d[i] * (s[i].first - s[i - 1].first);\n\tcout << ans << endl;\n}\nsigned main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tint T;\n\tcin >> T;\n\twhile (T--) get();\n\treturn 0;\n}"
}