1851C - Tiles ComebackSince the path must start in the first tile and end in the last tile, it is enough to construct a path consisting of 1 or 2 blocks of length k to solve the problem.If c1=cn, then we need to check that there are k−2 tiles of colour c0 between the first and the last tile. If this condition is satisfied, then the tiles that are found together with the first and the last tile form the path p, and the answer is — YES. Otherwise — the answer is NO.If c1≠cn we can solve the problem by the method of two pointers: let's move from the two ends of the array c to the middle, counting the number of tiles of colour c1 on the left and tiles of colour cn on the right. If the pointers meet no later than k tiles of the desired colours are found on both sides, the answer is — YES, otherwise — NO. Solution#include "bits/stdc++.h"
using namespace std;

bool solve(){
    int n, k;
    cin >> n >> k;
    vector<int>c(n);
    for(int i = 0; i < n; i++) cin >> c[i];
    int left = 0, right = 0, i = 0, j = n - 1;
    int k_left = k, k_right = k;

    if (c[0] == c[n - 1]){
        k_left = k / 2;
        k_right = k - k_left;
    }
    for(; i < n && left < k_left; i++){
        if(c[i] == c[0]) left++;
    }
    for(; j >= 0 && right < k_right; j--){
        if(c[j] == c[n - 1]) right++;
    }
    return (i - 1) < (j + 1);
}

int main(){
    int t;
    cin >> t;
    while(t--){
        cout << (solve() ? "YES" : "NO") << "\n";
    }

}