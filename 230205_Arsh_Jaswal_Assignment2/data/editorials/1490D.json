{
    "solution": "1490D - Permutation TransformationWe will construct the required tree recursively. Let us describe the state of tree construction by three values (l,r,d), where [l,r] — is the segment of the permutation, and d — is the current depth. Then the following transitions can be described:   find the position m of the maximum element on the segment [l,r], that is, am=maxi=lrai;  the depth of the vertex am is equal to d;  if l<m, then make the transition to the state (l,m−1,d+1);  if m<r, then make the transition to the state (m+1,r,d+1); Then, in order to construct the required tree, it is necessary to take (1,n,0) as the initial state. Solution#include <bits/stdc++.h>\n\nusing namespace std;\n\nvoid build(int l, int r, vector<int> const &a, vector<int> &d, int curD = 0) {\n  if (r < l) {\n    return;\n  }\n  if (l == r) {\n    d[l] = curD;\n    return;\n  }\n  int m = l;\n  for (int i = l + 1; i <= r; i++) {\n    if (a[m] < a[i]) {\n      m = i;\n    }\n  }\n  d[m] = curD;\n  build(l, m - 1, a, d, curD + 1);\n  build(m + 1, r, a, d, curD + 1);\n}\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  for (int &x : a) {\n    cin >> x;\n  }\n  vector<int> d(n);\n  build(0, n - 1, a, d);\n  for (int x :d) {\n    cout << x << \" \";\n  }\n  cout << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}"
}