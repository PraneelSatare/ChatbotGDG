{
    "solution": "1196B - Odd Sum SegmentsFirstly, let cnt be the number of odd elements in the array. Note that even elements are don't matter at all because they cannot change the parity of the sum.If cnt<k then it is obviously impossible to split the given array into k subsegments with odd sum. And if cnt%2≠k%2 then it is impossible to split the array into k subsegments with odd sum also because at least one of k segments will have even number of odd elements (so will have odd sum).In other cases the answer is always \"YES\" and you can print k−1 leftmost positions of odd elements and n as right borders of segments (it means that when you find one odd element, you end one segment). Because cnt%2=k%2 now, the last segment will have odd number of odd elements so it will have odd sum also. Solution#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; ++i) {\n\t\tint n, k;\n\t\tcin >> n >> k;\n\t\tvector<int> a(n);\n\t\tint cntodd = 0;\n\t\tfor (int j = 0; j < n; ++j) {\n\t\t\tcin >> a[j];\n\t\t\tcntodd += a[j] % 2;\n\t\t}\n\t\tif (cntodd < k || cntodd % 2 != k % 2) {\n\t\t\tcout << \"NO\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << \"YES\" << endl;\n\t\tfor (int j = 0; j < n; ++j) {\n\t\t\tif (k == 1) break;\n\t\t\tif (a[j] % 2 == 1) {\n\t\t\t\tcout << j + 1 << \" \";\n\t\t\t\t--k;\n\t\t\t}\n\t\t}\n\t\tcout << n << endl;\n\t}\n\treturn 0;\n}"
}