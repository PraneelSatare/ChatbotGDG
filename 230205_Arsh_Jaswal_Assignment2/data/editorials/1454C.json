{
    "solution": "1454C - Sequence TransformationFirstly, let's remove all consecutive equal elements (just keep one occurrence of each such element). For example, the array [1,1,2,3,3,3,2] becomes [1,2,3,2].Now, the answer for each ai is almost the number of its occurrences plus one. Why is it so? Because we need to remove all segments of elements between every pair of consecutive occurrences of ai. The number of such segments is the number of occurrences of ai minus one. There is also a segment before the first occurrence of ai and a segment after the last occurrence of ai. But the first segment doesn't exist for the first element and the last segment doesn't exist for the last element.So, after removing consecutive elements, let's calculate for each ai the number of its occurrences plus one, subtract one from the value of the first element and from the value of the last element. Then the answer is the minimum among these values for all ai. Solution#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> a(n);\n\t\tfor (auto &it : a) cin >> it;\n\t\tvector<int> res(n + 1, 1);\n\t\tn = unique(a.begin(), a.end()) - a.begin();\n\t\ta.resize(n);\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tres[a[i]] += 1;\n\t\t}\n\t\tres[a[0]] -= 1;\n\t\tres[a[n - 1]] -= 1;\n\t\tint ans = 1e9;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tans = min(ans, res[a[i]]);\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}"
}