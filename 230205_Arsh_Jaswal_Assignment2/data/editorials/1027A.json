{
    "solution": "1027A - Palindromic TwistIf some string can't be transformed to palindrom then it has some pair of positions (i,n−i+1) with different letters on them (as no such pair affects any other pair). Thus you need to check each pair for i from 1 to n2 and verify that the distance between the corresponding letters is either 0 or 2.Overall complexity: O(T⋅n). Solution (PikMike)#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\n\nint main() {\n    int T;\n    cin >> T;\n    \n    int n;\n    string s;\n    forn(_, T){\n        cin >> n >> s;\n        bool ok = true;\n        forn(i, n){\n            int k = abs(s[i] - s[n - i - 1]);\n            if (k > 2 || k % 2 == 1){\n                ok = false;\n                break;\n            }\n        }\n        cout << (ok ? \"YES\" : \"NO\") << endl;\n    }\n    return 0;\n}"
}