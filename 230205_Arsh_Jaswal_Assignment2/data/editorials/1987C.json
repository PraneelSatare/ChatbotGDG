{
    "solution": "1987C - Basil's GardenFirst, let's try to find when hn will first be equal to zero. The answer is clearly hn.Suppose for some 2≤i≤n we know that hi will first become equal to zero at time ti (tn=hn). If at some point in time, hi−1 was equal to hi (at the start of the second and before they are both equal to zero), ti−1 is equal to ti+1. Since after that point in time, if hi decreases, hi−1 must decrease in the next second. If hi−1 is never equal to hi (until they hit zero), hi−1 must always be strictly greater than hi. This means that hi−1 will keep decreasing every second until it hits zero, so ti−1 is equal to hi−1 in this case.Examples:   The array [2,3,1,1,1] changes as follows: [2,3,1,1,1]→[2,2,1,1,0]→[2,1,1,0,0]→ [1,1,0,0,0]→[1,0,0,0,0]→[0,0,0,0,0]. If we focus on the first two elements, they change as follows: [2,3]→[2,2]→[2,1]→[1,1]→[1,1]→[1,0]→[0,0].  The array [4,1,1] changes as follows: [4,1,1]→[3,1,0]→[2,0,0]→[1,0,0]→[0,0,0]. Let's combine the two cases. If initially hi−1≤hi holds, hi−1 will become equal to hi at some point in time, so ti−1=ti+1. Else, hi−1>hi, so ti−1=hi−1. Combining the two, we get ti−1=max(hi−1,ti+1).Since we know tn=hn, we can easily calculate all the other values of ti by iterating from n−1 to 1. The answer to the problem is t1, since ti−1≥ti+1 for all 2≤i≤n.Complexity: O(n) Solution#include <bits/stdc++.h>\n\n#define all(x) (x).begin(), (x).end()\n#define allr(x) (x).rbegin(), (x).rend()\n\nconst char nl = '\\n';\ntypedef long long ll;\ntypedef long double ld;\n\nusing namespace std;\n\nvoid solve() {\n    int n;\n    cin >> n;\n    \n    vector<int> h(n);\n    for (auto &x: h) cin >> x;\n    \n    int ans = h[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n        ans = max(ans + 1, h[i]);\n    }\n\n    cout << ans << nl;\n}\n\nint main() {\n\tios::sync_with_stdio(0); cin.tie(0);\n    \n    int T;\n    cin >> T;\n    while (T--) solve();\n} Feedback Good problem \n\n    \n\n\n387\n\n\n\n Average problem \n\n    \n\n\n42\n\n\n\n Bad problem \n\n    \n\n\n317\n\n\n\n "
}