{
    "solution": "1611C - Polycarp Recovers the PermutationThe maximum element is always added last, so if it is not in the first or last position, then there is no answer.Let us prove that if the permutation has its maximum element in the first or last position, then after n actions we can get an expanded permutation. Indeed, the maximum element will be added last at the desired end, and all the others will be added in reverse order.Then, if the answer exists, it is sufficient to simply unfold the permutation. Solution#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define forn(i, n) for (int i = 0; i < int(n); i++)\n \nint main() {\n    int t;\n    cin >> t;\n    forn(tt, t) {\n        int n;\n        cin >> n;\n        vector<int> a(n);\n        forn(i, n)\n            cin >> a[i];\n        if (a[0] != n && a[n - 1] != n)\n            cout << -1 << endl;\n        else {\n            for (int i = n - 1; i >= 0; i--)\n                cout << a[i] << \" \";\n            cout << endl;\n        }\n    }\n}"
}