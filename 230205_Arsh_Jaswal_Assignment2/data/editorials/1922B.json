{
    "solution": "1922B - Forming TrianglesAt first, let's figure out which sticks can be used to make a triangle. Let's denote the length of the longest stick as 2s0, the shortest stick as 2s2 and the middle stick as 2s1 (in other words, s is an array of length 3, consisting of three sticks for a triangle, sorted in non-ascending order). Important fact: s0==s1. It's true because if s0>s1, then 2s0≥2s1+2s2 and the triangle is degenerate. At the same time, the value of the s2 can be any integer from 0 to s0.So all we have to do is calculate the number of triples of sticks such that there are two or three maximums in the triple. Let's create an array cnt, where cnti is the number of sticks of length 2i, and the array sumCnt, where sumCnti is the number of sticks no longer than 2i. Now let's iterate over the length of the longest stick in the triangle (denote it as m). Then there are two cases:   All three sticks in a triangle are equal. Then the number of such triangles can be computed with a binomial coefficient: cntm∗(cntm−1)∗(cntm−2)6;  Only two sticks are equal (and have the same length). Then the number of such triangles is cntm∗(cntm−1)2⋅sumCntm−1.  Solution (Roms)#include <bits/stdc++.h>\n \nusing namespace std;\n \nint t;\n \nint main() {\n    cin >> t;\n    for (int tc = 0; tc < t; ++tc) {\n        int n;\n        cin >> n;\n        map<int, int> numOfLens;\n        for (int i = 0; i < n; ++i){\n            int x;\n            cin >> x;\n            ++numOfLens[x];\n        }\n        \n        long long res = 0;\n        int sum = 0;\n        for (auto it : numOfLens) {\n            long long cnt = it.second;\n            if(cnt >= 3)\n                res += cnt * (cnt - 1) * (cnt - 2) / 6;\n            if(cnt >= 2)\n                res += cnt * (cnt - 1) / 2 * sum;\n            sum += cnt;\n        }\n        \n        cout << res << endl;\n    }\n    return 0;\n}"
}