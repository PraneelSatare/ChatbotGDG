{
    "solution": "1537C - Challenging CliffsWe claim that the maximum difficulty is at least n−2. Assume the array is sorted. We first need to find the two mountains which go on the ends. To do this, we can iterate through every mountain in the sorted array and check the difference between a mountain and its neighbours in the array. Let mk and mk+1 be the mountains with the smallest height difference. We can achieve at least a difficulty of n−2 by arranging the mountains as mk,mk+2,mk+3...mn,m1,m2,.....,mk+1. To get difficulty n−1, we need mk to be the shortest mountain and mk+1 to be the tallest mountain. This will only happen if n=2. Code#include \"bits/stdc++.h\"\nusing namespace std;\n\nint main()\n{\n    int t;\n    cin >> t;\n    while(t--){\n        int n;\n        cin >> n;\n        vector<int> h(n);\n\n        for (int i = 0;i < n; i++){\n            cin >> h[i];\n        }\n        sort(h.begin(), h.end());\n\n        if(n == 2){\n            cout << h[0] << \" \" << h[1] << \"\\n\";\n            continue;\n        }\n\n        int pos = -1, mn = INT_MAX;\n\n        for (int i = 1;i < n; i++){\n            if(mn > abs(h[i] - h[i - 1])){\n                pos = i;\n                mn = abs(h[i] - h[i - 1]);\n            }\n        }\n        \n        for (int i = pos;i < n; i++){\n            cout << h[i] << \" \";\n        }\n        for(int i = 0;i < pos; i++){\n            cout << h[i] << \" \";\n        }\n\n        cout << \"\\n\";\n\n    }\n}"
}