1669G - Fall DownNote that the columns don't affect each other, so we can solve for each column by itself.For each column, go from the bottom to the top, and keep track of the row of the last obstacle seen; call it last. Note that initially, last=n+1, since we treat the floor as the n+1th row of obstacles. Whenever we see a new obstacle, we should update last.Now, if we ever see a stone, we should move it to row lastâˆ’1, since it will be one row above the last obstacle seen (it will fall on top of it). Afterwards, we should also decrease last by 1, because if any future stones fall on top of it, they will land on the row above this stone.This solution works in O(nm). We also accepted slower solutions that run in O(n2m) that simulate each stone falling. Solution#include <bits/stdc++.h>

using namespace std;

const int MAX = 200007;
const int MOD = 1000000007;

void solve() {
	int n, m;
	cin >> n >> m;
	char g[n + 7][m + 7];
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> g[i][j];
		}
	}
	for (int j = 0; j < m; j++) {
		int last = n - 1;
		for (int i = n - 1; i >= 0; i--) {
			if (g[i][j] == 'o') {last = i - 1;}
			else if (g[i][j] == '*') {swap(g[i][j], g[last][j]); last--;}
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << g[i][j];
		}
		cout << '\n';
	}
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int tt; cin >> tt; for (int i = 1; i <= tt; i++) {solve();}
    // solve();
}