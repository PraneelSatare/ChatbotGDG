{
    "solution": "1847B - Hamon OdysseyThere are two cases in this problem. First, if f(1,n)>0, then maximum number of groups becomes 1. This is because there are some bits set in all the elements. Now, if we divide the array in more than one group, then these bits are taken more than once which will not give smallest AND. Second case is when f(1,n)=0. This means the smallest AND is 0. Now, we need to greedily divide the array into subarrays such that the AND of each subarray should be 0. We keep taking elements in the subarray until the AND becomes 0. When AND becomes 0, we take remaining elements in the next subarray. If the last subarray has AND more than 0, then we need to merge that subarray with the previous subarray.Time complexity - O(n). solution#include <iostream>\n#include <vector>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long \n#define pb(e) push_back(e)\n#define sv(a) sort(a.begin(),a.end())\n#define sa(a,n) sort(a,a+n)\n#define mp(a,b) make_pair(a,b)\n#define all(x) x.begin(),x.end()\n\nvoid solve(){\n\tint n;\n\tcin >> n;\n\tint arr[n];\n\tfor(int i = 0; i < n; i++)cin >> arr[i];\n\tint cur = arr[0];\n\tint part = 1;\n\tfor(int i = 0; i < n; i++){\n\t\tcur &= arr[i];\n\t\tif(cur == 0){\n\t\t\tif(i == n-1)break;\n\t\t\tpart++;\n\t\t\tcur = arr[i + 1];\n\t\t}\n\t}\n\tif(cur != 0)part--;\n\tpart = max(part,1);\n\tcout << part << '\\n';\n}\n\nint main(){\nios_base::sync_with_stdio(false);\ncin.tie(NULL);\n\tint t;cin >> t;while(t--)\n\tsolve();\n\treturn 0;\n}"
}