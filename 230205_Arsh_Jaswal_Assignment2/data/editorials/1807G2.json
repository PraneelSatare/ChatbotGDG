{
    "solution": "1807G2 - Subsequence Addition (Hard Version)Let's prove that for an array a that was created by using a number of operations, with a sum of elements s we can add into a any number x (1≤x≤s).Suppose that it is true that in the array a with some length l we introduce a number x (1≤x≤suma). Then after introducing we can create using the initial elements of the array any number b (1≤b≤suma) and using the element x and some subset of the initial elements we can create any number b (x≤b≤suma+x), and because x≤suma we proved that for the new array of length l+1 we can still create any number between 1 and suma+x.Since it is true for the initial array, we can use induction and this fact to prove it is true for all arrays. So we just need to verify if our array satisfies this condition. We should sort the array and check for each i (2≤i≤n) if ci≤∑i−1j=1cj. Solution#include \"bits/stdc++.h\"\nusing namespace std;\n \n#define ll long long\n \n#define          all(v)              v.begin(), v.end()\n#define         rall(v)              v.rbegin(),v.rend()\n \n#define            pb                push_back\n#define          sz(a)               (int)a.size()\n \nvoid solve() {\n    int n; cin >> n;\n    vector<int> a(n);\n    for(int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    sort(all(a));\n    if(a[0] != 1) {\n        cout << \"NO\\n\";\n        return;\n    }\n    long long sum = a[0];\n    for(int i = 1; i < n; ++i) {\n        if(sum < a[i]) {\n            cout << \"NO\\n\";\n            return;\n        }\n        sum += a[i];\n    }\n    cout << \"YES\\n\";\n}\n \nint32_t main() {\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    int t = 1;\n    cin >> t;\n    while(t--) {\n        solve();\n    }\n}"
}