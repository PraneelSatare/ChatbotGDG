{
    "solution": "1657C - Bracket Sequence DeletionConsider the first character of the string. If it is '(', then we can remove the first two characters of the string and continue (because the prefix of length 2 will be either a palindrome or a regular bracket sequence). If the first character of the string is ')' then this is a bad case. Of course, the regular bracket sequence can't start with '(', so this prefix should be a palindrome. And what is the shortest palindrome we can get with the first character ')'? It is the closing bracket ')', then some (possibly, zero) amount of opening brackets '(', and another one closing bracket. We can see that we can't find a palindrome shorter than this one because we have to find a pair for the first character. So, if the first character of the string is ')', then we just remove anything until the next character ')' inclusive. To not remove any characters explicitly, we can just use pointers instead. And the last thing is to carefully handle cases when we can't do any operations. Solution (vovuh)#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n    freopen(\"input.txt\", \"r\", stdin);\n//  freopen(\"output.txt\", \"w\", stdout);\n#endif\n    \n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        string s;\n        cin >> n >> s;\n        int l = 0;\n        int cnt = 0;\n        while (l + 1 < n) {\n            if (s[l] == '(' || (s[l] == ')' && s[l + 1] == ')')) {\n                l += 2;\n            } else {\n                int r = l + 1;\n                while (r < n && s[r] != ')') {\n                    ++r;\n                }\n                if (r == n) {\n                    break;\n                }\n                l = r + 1;\n            }\n            ++cnt;\n        }\n        cout << cnt << ' ' << n - l << '\\n';\n    }\n    \n    return 0;\n}"
}