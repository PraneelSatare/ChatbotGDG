{
    "solution": "1842B - Tenzing and Books TutorialObserve the bitwise OR: if a bit of the knowledge changes to 1, it will never become 0.It tells us, if a book has difficulty rating y, and x|y≠x, Tenzing will never read this book because it will change a 0 bit in x to 1.We called a number y valid if x|y=x. For each sequence, we can find a longest prefix of it such that all numbers in this prefix are valid. Find the bitwise OR of the three prefix and check whether it equals to x.Time complexity: O(n) per test case. Alternative SolutionA naive approach is to enumerate the prefixes of the three stacks, which is an enumeration of n3. For each stack, the bitwise OR of the prefix has at most 31 different values (including empty prefix), because the bitwise OR of the prefix is non-decreasing, and each change will increase the number of 1s in binary. Since the number of 1s in binary cannot exceed 30, it can be changed at most 30 times. Therefore, the enumeration is reduced to min(n,31)3. In the worst case, the time complexity is O(∑n∗312). Code#include <iostream>\n\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false), cin.tie(nullptr);\n    int T;\n    cin >> T;\n    while (T--) {\n        int n, x, a[100000];\n        cin >> n >> x;\n        int s = 0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < n; j++) cin >> a[j];\n            for (int j = 0; j < n; j++) {\n                if ((x | a[j]) != x) break;\n                s |= a[j];\n            }\n        }\n        if (s == x) cout << \"YES\\n\";\n        else cout << \"NO\\n\";\n    }\n} Alternative Code#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false), cin.tie(nullptr);\n    int T;\n    cin >> T;\n    while (T--) {\n        int n, x, ai;\n        cin >> n >> x;\n        vector<int> pre[3];\n        for (int i = 0; i < 3; i++) {\n            int s = 0;\n            pre[i].push_back(s);\n            for (int j = 0; j < n; j++) {\n                cin >> ai;\n                if ((s | ai) != s)\n                    s |= ai, pre[i].push_back(s);\n            }\n        }\n        bool ans = 0;\n        for (int A : pre[0]) for (int B : pre[1]) for (int C : pre[2])\n            ans |= (A | B | C) == x;\n        cout << (ans ? \"YES\\n\" : \"NO\\n\");\n    }\n}"
}