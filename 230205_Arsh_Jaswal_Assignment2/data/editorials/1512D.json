{
    "solution": "1512D - Corrupted ArrayWhat is the sum of all the elements in b? This is twice the sum of all the elements in a + x.Denote by B the sum of all the elements of b. Let's iterate over which of the array elements was added as the sum of the elements a (let's denote, for a). Then, x = B−2⋅A. It remains to check that the element x is present in the array b, this can be done using a hash table or a binary search tree. Solution#include <bits/stdc++.h>\nusing namespace std;\n\nvoid no() {\n  cout << \"-1\" << endl;\n}\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<int> b(n + 2);\n  for (int &x : b) {\n    cin >> x;\n  }\n\n  multiset<int> have(b.begin(), b.end());\n  long long sum = accumulate(b.begin(), b.end(), 0LL);\n  for (int x : b) {\n    have.erase(have.find(x));\n    sum -= x;\n    if (sum % 2 == 0 && sum <= 2'000'000'000 && have.find(sum / 2) != have.end()) {\n      have.erase(have.find(sum / 2));\n      for (int y : have) {\n        cout << y << \" \";\n      }\n      cout << endl;\n      return;\n    }\n    sum += x;\n    have.insert(x);\n  }\n  no();\n}\n\nint main() {\n  int tests;\n  cin >> tests;\n  while (tests-- > 0) {\n    solve();\n  }\n  return 0;\n}"
}