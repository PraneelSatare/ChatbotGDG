{
    "solution": "2008D - Sakurako's HobbyAny permutation can be divided into some number of cycles, so F(i) is equal to the number of black colored elements in the cycle where i is. So, we can write out all cycles in O(n) and memorize for each i the number of black colored elements in the cycle where it is. Solution in C++#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main(){\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        long long n;\n        cin>>n;\n        long long p[n+1]={0},b[n+1]={0};\n        int us[n+1]={0};\n        for(int i=1;i<=n;i++)\n        {\n            cin>>p[i];\n        }\n        string s;\n        cin >> s;\n        for(int i=1;i<=n;i++)\n        {\n            if(us[i])continue;\n            int sz=0;\n            while(!us[i])\n            {\n                us[i]=1;\n                sz += s[i - 1] == '0';\n                i=p[i];\n            }\n            while(us[i]!=2)\n            {\n                b[i]=sz;\n                us[i]=2;\n                i=p[i];\n            }\n        }\n        for(int i=1;i<=n;i++)\n        {\n            cout<<b[i]<<\" \";\n        }\n        cout<<endl;\n    }\n} Solution in Pythont = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = [0] * (n + 1)\n    us = [0] * (n + 1)\n    p = [k-1 for k in map(int, input().split())]\n    s = input()\n    for i in range(0, n):\n        if us[i]:\n            continue\n        sz = 0\n        while not us[i]:\n            us[i] = 1\n            sz += s[i] == '0'\n            i = p[i]\n        while us[i] != 2:\n            b[i] = sz\n            us[i] = 2\n            i = p[i]\n    print(\" \".join(map(str, b[:-1]))) Rate the problem Didn't solve \n\n    \n\n\n70\n\n\n\n Good task \n\n    \n\n\n427\n\n\n\n Average task \n\n    \n\n\n39\n\n\n\n Bad task \n\n    \n\n\n31\n\n\n\n "
}