{
    "solution": "1417B - Two ArraysLet us partition the array into three sets X, Y, Z such that X contains all numbers less than T/2, Y contains all numbers equal to T/2 and Z contains all numbers greater than T/2. It is clear that f(X)=f(Z)=0. Now, since each pair in Y makes a sum of T, the best solution is to distribute all numbers in Y equally among X and Z. Time complexity: O(n)Space complexity: O(n) Code in C++ (hugopm)#include <bits/stdc++.h>\n#define len(v) ((int)((v).size()))\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define chmax(x, v) x = max((x), (v))\n#define chmin(x, v) x = min((x), (v))\nusing namespace std;\nusing ll = long long;\n\nvoid solve() {\n\tint n, tar;\n\tcin >> n >> tar;\n\tint curMid = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint x; cin >> x;\n\t\tint r;\n\t\tif (tar % 2 == 0 && x == tar/2)\n\t\t\tr = (curMid++) % 2;\n\t\telse if (2*x < tar)\n\t\t\tr = 0;\n\t\telse\n\t\t\tr = 1;\n\t\tcout << r << \" \\n\"[i==n-1];\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false), cin.tie(0);\n\n\tint nbTests;\n\tcin >> nbTests;\n\tfor (int iTest = 0; iTest < nbTests; ++iTest) {\n\t\tsolve();\n\t}\n}Div2C/Div1A by nkamzabek  Editorial"
}