{
    "solution": "1860B - Fancy CoinsThere are two ways to approach this problem: a mathematical way and an algorithmic way.Approach 1Let's start by looking at the possible ways to represent m burles with our coins. For example, we could try to use as many coins of value k as possible: then, the number of coins of value k will be ⌊mk⌋, and the number of coins of value 1 will be mmodk.Now suppose it's not optimal to use that many coins of value k; what if it's better to use more coins of value 1 and fewer coins of value k? Well, we can still start with using ⌊mk⌋ coins of value k and mmodk coins of value 1, and then try to replace one coin of value k with k coins of value 1 several times (maybe zero).How many times should we do this, and when should we stop to get an optimal solution? Well, firstly, let's make sure that we have already taken as many regular coins as possible. Then, if we have at least k leftover coins of value 1 which are regular (not fancy), and we have taken at least one fancy coin of value k, it's better to replace that coin. It's easy to see that there's no need for any replacements if that's not the case: if we don't have k regular coins which are currently unused, then at least one of the replacement coins will be fancy; and if the coin of value k we want to replace is not fancy, why replacing it at all?So, we could write a while-loop that keeps track how many coins of which types we have taken, and replaces one fancy coin of value k with k regular coins of value 1 until it's impossible. Unfortunately, this is too slow. But instead of running this loop, we can calculate the number of times we make that replacement in O(1): it is the minimum of the number of regular coins of value 1 we aren't using, divided by k, and the number of fancy coins of value k we are using.So, the outline of the solution is the following:  start by taking as many coins of value k as possible, and calculate how many coins of which value we have taken;  calculate how many regular and fancy coins of both types we have taken;  calculate how many \"replacements\" (discard one fancy coin of value k, add k regular coins of value 1) we can make. Approach 2The second approach also starts with analyzing how many coins of value 1 and how many coins of value k we can take. The minimum number of coins of value k we can take is 0, and the maximum number of such coins is ⌊mk⌋.Let f(x) denote the number of fancy coins we use, if we take exactly x coins of value k. This function can easily be calculated because we know how many coins of both types we take, if x is fixed. We need to find the minimum of this function on [0,⌊mk⌋].How does f(x+1)−f(x) behave? The meaning of going from f(x) to f(x+1) is just replacing k coins of value 1 with one coin of value k. When we increase x, obviously, we should try to discard fancy coins of value 1 first, then regular coins of value 1 (and the number of fancy coins we will discard will never increase when we increase x). Similarly, we should try to take regular coins of value k first, then fancy ones (and the number of fancy coins we take will never decrease when we increase x). So, the value of f(x+1)−f(x) does not decrease when x increases.All of this means that the minimum value of f(x) can be found using ternary search. Solution 1 (BledDest)#include<bits/stdc++.h>\n \nusing namespace std;\n \nint main()\n{\n\tint t;\n\tcin >> t;\n\tfor(int i = 0; i < t; i++)\n\t{\n\t\tint m, k, a1, ak;\n\t\tcin >> m >> k >> a1 >> ak;\n\t\tint taken_k = m / k;\n\t\tint taken_1 = m % k;\n\t\tint taken_fancy_1 = max(0, taken_1 - a1);\n\t\tint left_regular_1 = max(0, a1 - taken_1);\n\t\tint taken_fancy_k = max(0, taken_k - ak);\n\t\tint to_replace = min(left_regular_1 / k, taken_fancy_k);\n\t\tint ans = taken_fancy_1 + taken_fancy_k - to_replace;\n\t\tcout << ans << endl;\n\t}\n} Solution 2 (BledDest)#include<bits/stdc++.h>\n \nusing namespace std;\n \nint main()\n{\n\tint t;\n\tcin >> t;\n\tfor(int i = 0; i < t; i++)\n\t{\n\t\tint m, k, a1, ak;\n\t\tcin >> m >> k >> a1 >> ak;\n\t\t// function which calculates the number of fancy coins taken\n\t\t// if we take exactly x coins of value k\n\t\tauto f = [m, k, a1, ak](int x)\n\t\t{\n\t\t\tint taken_1 = m - k * x;\n\t\t\treturn max(0, taken_1 - a1) + max(0, x - ak);\n\t\t};\n\t\t\n\t\tint lf = 0;\n\t\tint rg = m / k;\n\t\twhile(rg - lf > 2)\n\t\t{\n\t\t\tint mid = (lf + rg) / 2;\n\t\t\tif(f(mid) < f(mid + 1))\n\t\t\t\trg = mid + 1;\n\t\t\telse\n\t\t\t\tlf = mid;\n\t\t}\n\t\tint ans = 1e9;\n\t\tfor(int i = lf; i <= rg; i++) ans = min(ans, f(i));\n\t\tcout << ans << endl;\n\t}\n}"
}