{
    "solution": "2000D - Right Left WrongNote that since all characters of the selected segment of the string s are erased after applying the operation, the segments we choose cannot overlap. However, they can be nested if we first choose an inner segment and then an outer one.Since all numbers in the array are positive, it is always beneficial to take the largest possible segment in the answer, that is, from the first 'L' to the last 'R'. By choosing this segment, we can only select segments within it. We will continue to choose such segments within the last selected one as long as possible. To quickly find the sums of the segments, we will calculate the prefix sums of the array a. Solutiondef solve():\n    n = int(input())\n    a = [0]\n    for x in input().split():\n        x = int(x)\n        a.append(a[-1] + x)\n    s = input()\n    ans = 0\n    l = 0\n    r = n - 1\n    while r > l:\n        while l < n and s[l] == 'R':\n            l += 1\n        while r >= 0 and s[r] == 'L':\n            r -= 1\n        if l < r:\n            ans += a[r + 1] - a[l]\n            l += 1\n            r -= 1\n    print(ans)\n \nt = int(input())\nfor _ in range(t):\n    solve()"
}