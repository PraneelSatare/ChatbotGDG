{
    "solution": "1293B - JOE is on TV!Frums - Turnstile JumperThis is a greedy problem, with the optimal scenario being each question eliminating a single opponent.It is easy to see that we will want each question to eliminate one opponent only, since after each elimination, the ratio t/s will be more and more rewarding (as s lowers overtime) - as a result, each elimination should have the lowest possible t (i.e. t=1) so more opponents would have their rewards increased.Time complexity is O(n). Solution (Akikaze, C++)Submission link: 69151243 Source code in plain text#pragma GCC optimize(\"Ofast\")\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define endl '\\n'\n\nint n;\n\nvoid Input() {\n\tcin >> n;\n}\n\nvoid Solve() {\n\tdouble ans = 0;\n\tfor (int i=1; i<=n; i++) ans += 1.0 / i;\n\t\n\tcout << fixed << setprecision(12) << ans << endl;\n}\n\nint main(int argc, char* argv[]) {\n\tios_base::sync_with_stdio(0); cin.tie(NULL);\n\tInput(); Solve(); return 0;\n} Solution (Akikaze, Java 8)Submission link: 69151737 Source code in plain textimport java.io.*;\nimport java.util.*;\n\npublic class Akisolution {\n\tpublic static Scanner sc = new Scanner(System.in);\n\tpublic static PrintWriter out = new PrintWriter(System.out, true);\n\tpublic static int n;\n\n\tpublic static void Input() {\n\t\tn = sc.nextInt();\n\t}\n\n\tpublic static void Solve() {\n\t\tdouble ans = 0;\n\t\tfor (int i=1; i<=n; i++) ans += 1.0 / i;\n\n\t\tout.printf(\"%.12f\\n\", ans);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tInput(); Solve();\n\t}\n} Solution (Akikaze, Python 3)Submission link: 69151256 Source code in plain textT = 1\nfor test_no in range(T):\n\tn = int(input())\n\tans = sum([1.0 / i for i in range(1, n+1)])\n\n\tprint(ans)"
}