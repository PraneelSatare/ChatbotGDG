{
    "solution": "1859B - Olya and Game with Arrays HintsHint 1Do all numbers in a single array really matter? Hint 2If only the first minimum and the second minimum matter, what is the only way to increase a single array's beauty? Hint 3What can we say about the array which will have the smallest number in the end? TutorialTo increase the answer for each array separately, it is necessary to move the minimum to another array. Then, notice that it is optimal to move all the minimums to one array. Let's figure out which array. After moving the minimum from an array, the second minimum in the original array becomes the new minimum. Then, it is easy to notice that it is optimal to move all the minimums to the array with the smallest second minimum. After all the movements, we will have one array where the minimum element is the smallest number among all the arrays, and n−1 arrays where the minimum element is the second minimum in the original array.Therefore, the answer to the problem will be M+K−S, where M is the minimum element among all the arrays, K is the sum of all the second minimums, and S is the smallest second minimum. Author's code#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n \nusing namespace std;\n \n#define all(v) v.begin(), v.end()\n \ntypedef long long ll;\n \nconst int INF = 1e9 + 7;\n \nvoid solve() {\n    int n;\n    cin >> n;\n \n    int minn = INF;\n    vector<int> min2;\n    for (int i = 0 ; i < n ; i++) {\n        int m;\n        cin >> m;\n        vector<int> v(m);\n        for (auto &el : v) cin >> el;\n \n        int minel = *min_element(all(v));\n        minn = min(minn, minel);\n        v.erase(find(all(v), minel));\n        min2.push_back(*min_element(all(v)));\n    }\n    cout << minn + (ll) accumulate(all(min2), 0ll) - *min_element(all(min2)) << \"\\n\";\n}\n \nsigned main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n \n#ifdef LOCAL\n    freopen(\"a.in\", \"r\", stdin);\n#endif\n \n    int t = 1;\n    cin >> t;\n    while (t--)\n        solve();\n \n    return 0;\n}\n"
}