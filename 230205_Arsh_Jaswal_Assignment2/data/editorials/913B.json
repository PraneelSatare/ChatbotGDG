{
    "solution": "913B - Christmas SpruceLets calculate amount of children for each vertex. To do that lets increase by 1 c[pi] for every pi. Then iterate over all vertexes. If i-th vertex has 0 children (i.e. c[i] = 0), skip this vertex. Else again iterate over all vertexes and calculate number of vertexes j such that c[j] = 0 and pj = i. If this number is lower than 3, answer is \"No\". Else answer is \"Yes\". C++ solution#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> p(n), deg(n);\n  for (int i = 1; i < n; i++) {\n    cin >> p[i];\n    p[i]--;\n    deg[p[i]]++;\n  }\n  vector<int> sons_leaves(n);\n  for (int i = 0; i < n; i++) {\n    if (deg[i] == 0) {\n      sons_leaves[p[i]]++;\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    if (deg[i] > 0 && sons_leaves[i] < 3) {\n      puts(\"No\");\n      return 0;\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n} Python solutionn = int(input())\np = [int(input()) - 1 for _ in range(n - 1)]\nleafs = list(filter(lambda x: not x in p, range(n)))\nlp = [x for i, x in enumerate(p) if i + 1 in leafs]\nx = min(lp.count(k) for k in p)\nprint(\"Yes\" if x >= 3 else \"No\") Party LemonadeProblem writer: tourist "
}