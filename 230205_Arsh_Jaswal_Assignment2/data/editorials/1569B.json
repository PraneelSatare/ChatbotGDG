{
    "solution": "1569B - Chess TournamentSince the chess players of the first type should not lose a single game, each game between two chess players of the first type should end in a draw (so that none of them gets defeated). And a game between a chess player of the first type and the second type should end either with a victory of the first or a draw. Therefore, for convenience, we will say that all games with a chess player of the first type end in a draw.Now there are only games between chess players of the second type left. If there are only 1 or 2 such players, then there is no answer. Otherwise, we can choose the following method: the i-th chess player of the second type wins against the i+1-th chess player of the second type, and the last one wins against the first; all remaining games are drawn. Solution (Neon)#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL); \n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    string s;\n    cin >> n >> s;\n    vector<int> id;\n    for (int i = 0; i < n; ++i) if (s[i] == '2')\n      id.push_back(i);\n    int k = id.size();\n    if (k == 1 || k == 2) {\n      cout << \"NO\\n\";\n      continue;\n    }\n    vector<string> t(n, string(n, '='));\n    for (int i = 0; i < n; ++i) t[i][i] = 'X';\n    for (int i = 0; i < k; ++i) {\n      int x = id[i], y = id[(i + 1) % k];\n      t[x][y] = '+';\n      t[y][x] = '-';\n    }\n    cout << \"YES\\n\";\n    for (int i = 0; i < n; ++i) cout << t[i] << '\\n';\n  }\n}"
}