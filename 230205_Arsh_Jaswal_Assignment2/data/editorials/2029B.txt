2029B - ReplacementAuthor: wyrqwqFirst Blood: Benq at 00:02:30 Hint(01 or 10 exists) ‚ü∫ (both 0 and 1 exist). SolutionEach time we do an operation, if s consists only of 0 or 1, we surely cannot find any valid indices. Otherwise, we can always perform the operation successfully. In the i-th operation, if ti=0, we actually decrease the number of 1-s by 1, and vice versa. Thus, we only need to maintain the number of 0-s and 1-s in s. If any of them falls to 0 before the last operation, the answer is NO, otherwise, the answer is YES.Time complexity: O(n) per test case. Code (C++)#include <bits/stdc++.h>
#define all(s) s.begin(), s.end()

using namespace std;
using ll = long long;

const int _N = 1e5 + 5;

void solve() {
	int n; cin >> n;
	string s, t; cin >> s >> t;
	int cnt0 = count(all(s), '0'), cnt1 = n - cnt0;
	for (int i = 0; i < n - 1; i++) {
		if (cnt0 == 0 || cnt1 == 0) {
			cout << "NO" << '\n';
			return;
		}
		if (t[i] == '1') cnt0--;
		else cnt1--;
	}
	cout << "YES" << '\n';
}

int main() {
	int T; cin >> T;
	while (T--) {
		solve();
	}
} Code (Python 3)for _ in range(int(input())):
    n = int(input())
    s = input()
    one = s.count("1")
    zero = s.count("0")
    ans = "YES"
    for ti in input():
        if one == 0 or zero == 0:
            ans = "NO"
            break
        one -= 1
        zero -= 1
        if ti == "1":
            one += 1
        else:
            zero += 1
    print(ans) Rate the Problem Amazing problem: 

    


64



 Good problem: 

    


214



 Average problem: 

    


26



 Bad problem: 

    


46



 Didn't solve: 

    


21



 