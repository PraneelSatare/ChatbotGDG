1902B - Getting PointsFirstly, let c be the total number of tasks in the term. Then c=⌈n7⌉=⌊n+67⌋.Suppose, Monocarp will study exactly k days. How many points will he get? He gets k⋅l for attending lessons and, since he can complete at most 2 tasks per day, he will solve no more than min(c,2⋅k) tasks. So, in the best possible scenario he will get k⋅l+min(c,2k)⋅t points.And, actually, it's possible to get exactly that many points. For example, Monocarp can study the last k days of the term: at the n-th day he will complete (c−1)-th and c-th tasks, at the (n−1)-th day — tasks (c−3) and (c−2) and so on. It's easy to see that all that tasks will be available at the day Monocarp completes them.In total, we need to find the minimum k such that k⋅l+min(c,2k)⋅t≥P. We can analyze two cases, or perform a Binary Search on k. Solution (adedalic)fun main(args: Array<String>) {
    repeat(readln().toInt()) {
        val (n, p, l, t) = readln().split(' ').map { it.toLong() }
        val cntTasks = (n + 6) / 7
        
        fun calc(k: Long) = k * l + minOf(2 * k, cntTasks) * t
        var lf = 0L
        var rg = n
        while (rg - lf > 1) {
            val mid = (lf + rg) / 2
            if (calc(mid) >= p)
                rg = mid
            else
                lf = mid
        }
        println(n - rg)
    }
}