{
    "solution": "1278A - Shuffle HashingThe general idea of the solution is to check that string h contains some substring which is a permutation of p. The constraints were so low you could do it with any algorithm, even O(n3logn) per test case could pass.The most straightforward way was to iterate over the substring of h, sort it and check if it's equal to p sorted. That's O(n3logn).Next you could notice than only substrings of length |p| matter and shave another n off the complexity to get O(n2logn).After that you might remember that the size of the alphabet is pretty low. And one string is a permutation of another one if the amounts of letters 'a', letters 'b' and so on in them are equal. So you can precalculate array cntp, where cntp[i] is equal to the amount of the i-th letter of the alphabet in p. Calculating this array for O(n) substrings will be O(n) each, so that makes it O(n2).Then notice how easy it is to recalculate the letter counts going from some substring [i;i+|p|−1] to [i+1;i+|p|]. Just subtract 1 from the amount of the i-th letter and add 1 to the amount of the (i+|p|)-th letter. Comparing two array every time will still lead to O(n⋅|AL|), though.The final optimization is to maintain the boolean array eq such that eqi means that cntp[i] is equal to the current value of cnt of the substring. You are updating just two values of cnt on each step, thus only two values of eq might change. You want all the |AL| values to be true, so keep the number of values true in that array and say \"YES\" if that number is equal to |AL|. That finally makes the solution O(n) per test case. Solution 1 (pikmike)#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\nstring p, h;\n\nbool read(){\n\tif (!(cin >> p >> h))\n\t\treturn false;\n\treturn true;\n}\n\nvoid solve(){\n\tint n = h.size();\n\tvector<int> cntp(26);\n\tforn(i, p.size())\n\t\t++cntp[p[i] - 'a'];\n\tforn(i, n){\n\t\tvector<int> cnth(26);\n\t\tfor (int j = i; j < n; ++j){\n\t\t\t++cnth[h[j] - 'a'];\n\t\t\tif (cntp == cnth){\n\t\t\t\tputs(\"YES\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tputs(\"NO\");\n}\n\nint main() {\n\tint tc;\n\tscanf(\"%d\", &tc);\n\tforn(_, tc){\n\t\tread();\n\t\tsolve();\n\t}\n\treturn 0;\n} Solution 2 (pikmike)#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\nconst int AL = 26;\nstring p, h;\n\nbool read(){\n\tif (!(cin >> p >> h))\n\t\treturn false;\n\treturn true;\n}\n\nvoid solve(){\n\tvector<int> cntp(AL), cnt(AL);\n\tvector<bool> eq(AL);\n\tint sum = 0;\n\t\n\tauto chg = [&cntp, &cnt, &eq, &sum](int c, int val){\n\t\tsum -= eq[c];\n\t\tcnt[c] += val;\n\t\teq[c] = (cntp[c] == cnt[c]);\n\t\tsum += eq[c];\n\t};\n\t\n\tforn(i, p.size())\n\t\t++cntp[p[i] - 'a'];\n\tforn(i, AL){\n\t\teq[i] = (cnt[i] == cntp[i]);\n\t\tsum += eq[i];\n\t}\n\t\n\tint m = p.size();\n\tint n = h.size();\n\tforn(i, n){\n\t\tchg(h[i] - 'a', 1);\n\t\tif (i >= m) chg(h[i - m] - 'a', -1);\n\t\tif (sum == AL){\n\t\t\tputs(\"YES\");\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tputs(\"NO\");\n}\n\nint main() {\n\tint tc;\n\tscanf(\"%d\", &tc);\n\tforn(_, tc){\n\t\tread();\n\t\tsolve();\n\t}\n\treturn 0;\n}"
}