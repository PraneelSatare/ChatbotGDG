1557B - Moamen and k-subarrays Hint 1You can ignore the k given in the input, try to find the minimum k you need to sort the array (let call it mnK).If mnK ≤ k then you can split some subarrays to make it equal k, so the answer is will be "YES". otherwise, the answer will be "NO". Hint 2You need to split the array into the minimum number of subarrays such that each subarray is sorted. SolutionThis problem can be solved for \textbf{at least} k subarrays as it is easy to just add extra subarrays (if needed) to achieve \textbf{exactly} k subarrays. To solve this problem, you need to know what are the numbers that can be grouped into the same subarray. This can be done by maintaining the sorted array along with the non-sorted array.As the numbers are distinct, we can iterate over the non-sorted array, and just add each element ai to the subarray ending in ai−1 IFF they follow each other in the sorted array, or start a new subarray if they do not follow each other.For example, if the (non-sorted) array is [ 2, 3, −1, 1], the sorted array will be [ −1, 1, 2, 3 ]. If we iterate over the non-sorted array, we will add 2 to a new subarray, then we will add 3 to the same subarray as they follow each other in the sorted array. After that, we will start a new subarray at −1 as −1 and 3 do not follow each other in the sorted array. Finally, we will add 1 to the subarray containing −1. It should end up like this: { [ 2, 3 ], [ −1, 1 ] }.Using this approach, you can get the smallest number of subarrays needed. If it is strictly greater than the given k, the answer is ''NO''. Otherwise, it is ''YES''. Code125412883