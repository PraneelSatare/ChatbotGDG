{
    "solution": "1976B - Increase/Decrease/CopyLet's fix the index of the element to be copied (denote it as i). For all other elements of the array, the number of required operations is |aj−bj| for all j≠i.Consider the case when ai≤bi (similar to the case when ai≥bi). There are three possible relative location of the desired element bn+1:   if bn+1<ai, you can proceed as follows: copy i-th element, increase an+1 to bn+1 and increase ai to bi, then the number of operations is equal to 1+(bn+1−ai)+(bi−ai);  if ai≤bn+1≤bi, you can proceed as follows: increase ai to bn+1, copy it, and keep increasing to bi, then the number of operations is equal to (bn+1−ai)+1+(bi−bn+1)=(bi−ai)+1;  if bi<bn+1, you can proceed as follows: increase ai to bi, copy i-th element, and increase an+1 to bn+1, then the number of operations is equal to (bi−ai)+1+(bn+1−bi). As you can see, regardless of the case, |bi−ai| is also added to the answer. So the answer looks like this: ∑j=1n|bj−aj| plus some extra operations to get bn+1. That extra value is equal to the minimum value of f(i) over all indices i, where f(i) is equal to 1+|bn+1−ai| or 1 or 1+|bn+1−bi| depending on the cases described above. Solution (Neon)#include <bits/stdc++.h>\n \nusing namespace std;\n \nusing li = long long;\n \nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    cin >> n;\n    vector<li> a(n), b(n + 1);\n    for (auto& x : a) cin >> x;\n    for (auto& x : b) cin >> x;\n    li sum = 0, ext = 1e18;\n    for (int i = 0; i < n; ++i) {\n      sum += abs(a[i] - b[i]);\n      ext = min(ext, abs(a[i] - b[n]));\n      ext = min(ext, abs(b[i] - b[n]));\n      if (min(a[i], b[i]) <= b[n] && b[n] <= max(a[i], b[i]))\n        ext = 0;\n    }\n    cout << sum + ext + 1 << '\\n';\n  }\n}"
}