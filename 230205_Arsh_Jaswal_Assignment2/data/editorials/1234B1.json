{
    "solution": "1234B1 - Social Network (easy version)The solution to this problem is just the implementation of what is written in the problem statement. Let's carry the array q which shows the current smartphone screen. When we receive the new message from the friend with ID idi, let's do the following sequence of moves:  Firstly, let's try to find him on the screen. If he is found, just do nothing and continue.  Otherwise, let's check if the current number of conversations is k. If it is so then let's remove the last conversation.  Now the number of conversations is less than k and the current friend is not shown on the screen. Let's insert him into the first position. After processing all n messages the answer is just the array q. Solution#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, k;\n\tcin >> n >> k;\n\tvector<int> ids;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint id;\n\t\tcin >> id;\n\t\tif (find(ids.begin(), ids.end(), id) == ids.end()) {\n\t\t\tif (int(ids.size()) >= k) ids.pop_back();\n\t\t\tids.insert(ids.begin(), id);\n\t\t}\n\t}\n\t\n\tcout << ids.size() << endl;\n\tfor (auto it : ids) cout << it << \" \";\n\tcout << endl;\n\t\n\treturn 0;\n}"
}