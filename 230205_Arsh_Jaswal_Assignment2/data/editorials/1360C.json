{
    "solution": "1360C - Similar PairsLet e — be the number of even numbers in the array, and o — be the number of odd numbers in the array. Note that if the parities of e and of o do not equal, then the answer does not exist. Otherwise, we consider two cases:   e and o — are even numbers. Then all numbers can be combined into pairs of equal parity.  e and o — are odd numbers. Then you need to check whether there are two numbers in the array such that the modulus of their difference is 1. If there are two such numbers, then combine them into one pair. e and o will decrease by 1 and become even, then the solution exists as shown in the previous case.  Solution#include <bits/stdc++.h>\n\nusing namespace std;\nusing ld = long double;\nusing ll = long long;\n\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> v(n);\n    int a = 0, b = 0;\n    for (int &e : v) {\n        cin >> e;\n        if (e % 2 == 0) {\n            a++;\n        } else {\n            b++;\n        }\n    }\n    if (a % 2 != b % 2) {\n        cout << \"NO\\n\";\n    } else {\n        if (a % 2 == 0) {\n            cout << \"YES\\n\";\n        } else {\n            for (int i = 0; i < n; i++) {\n                for (int j = i + 1; j < n; j++) {\n                    if (v[i] % 2 != v[j] % 2 && abs(v[i] - v[j]) == 1) {\n                        cout << \"YES\\n\";\n                        return;\n                    }\n                }\n            }\n            cout << \"NO\\n\";\n        }\n    }\n}\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        solve();\n    }\n}"
}