1490D - Permutation TransformationWe will construct the required tree recursively. Let us describe the state of tree construction by three values (l,r,d), where [l,r] — is the segment of the permutation, and d — is the current depth. Then the following transitions can be described:   find the position m of the maximum element on the segment [l,r], that is, am=maxi=lrai;  the depth of the vertex am is equal to d;  if l<m, then make the transition to the state (l,m−1,d+1);  if m<r, then make the transition to the state (m+1,r,d+1); Then, in order to construct the required tree, it is necessary to take (1,n,0) as the initial state. Solution#include <bits/stdc++.h>

using namespace std;

void build(int l, int r, vector<int> const &a, vector<int> &d, int curD = 0) {
  if (r < l) {
    return;
  }
  if (l == r) {
    d[l] = curD;
    return;
  }
  int m = l;
  for (int i = l + 1; i <= r; i++) {
    if (a[m] < a[i]) {
      m = i;
    }
  }
  d[m] = curD;
  build(l, m - 1, a, d, curD + 1);
  build(m + 1, r, a, d, curD + 1);
}

void solve() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int &x : a) {
    cin >> x;
  }
  vector<int> d(n);
  build(0, n - 1, a, d);
  for (int x :d) {
    cout << x << " ";
  }
  cout << endl;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}