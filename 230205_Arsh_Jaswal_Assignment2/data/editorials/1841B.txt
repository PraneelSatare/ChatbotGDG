1841B - Keep it BeautifulFirst, notice that the given operation is a cyclic shift of the array. So we can treat the array as cyclic, meaning element n is a neighbor of element 1.Let's try to rephrase the condition for the beautiful array. What does it mean for the array to be sorted? For all j from 1 to n−1, aj≤aj+1 should hold. If they do, then you can choose i=0 (leave the array as is).What if there are such j that aj>aj+1? If there is only one such j, then we might still be able to fix the array: choose i=j. However, that will make a pair an and a1 cyclically shift into the array. So an≤a1 should hold.If there are at least two such j or just one but an>a1, then we can show that it's impossible to make the array sorted. Since there are at least two pairs of neighboring elements that are not sorted, at least one of them will still be in the array after any cyclic shift.Thus, we can maintain the number of such j that aj>aj+1 and check if an>a1 every time if the count is exactly 1.Overall complexity: O(q) per testcase. Solution (awoo)for _ in range(int(input())):
	q = int(input())
	a = []
	cnt = 0
	for x in map(int, input().split()):
		nw_cnt = cnt + (len(a) > 0 and a[-1] > x)
		if nw_cnt == 0 or (nw_cnt == 1 and x <= a[0]):
			a.append(x)
			cnt = nw_cnt
			print('1', end="")
		else:
			print('0', end="")
	print()