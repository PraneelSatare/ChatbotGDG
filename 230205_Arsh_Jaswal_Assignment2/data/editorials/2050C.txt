2050C - Uninteresting NumberThe requirement that a digit must remain a digit imposes the following restrictions on transformations: we can transform 0 into 0, 1 into 1, 2 into 4, and 3 into 9. Any other digit squared will exceed 9, therefore, it cannot be transformed. Transformations involving 0 and 1 are useless, leaving us with two possible actions: squaring the digit 2 or the digit 3.We will use the divisibility rule for 9. It states that a number is divisible by 9 if and only if the sum of its digits is divisible by 9. Let's see how the sum of the digits will change with the possible transformations. If we square 2, the sum of the digits increases by 22−2=2, and if we square 3, the sum of the digits increases by 32−3=6.We will count the number of digits 2 in the number and the number of digits 3 in the number. We can choose how many of the available digits 2 and 3 we will transform. Transforming more than 8 twos and more than 8 threes is pointless because remainders modulo 9 their transformation adds to the sum will repeat.Thus, the final solution looks like this: we calculate the sum of the digits in the number, count the number of digits 2 and 3. We will iterate over how many digits 2 we change (possibly 0, but no more than 8), and how many digits 3 we change (possibly 0, but also no more than 8). Let's say we changed x digits 2 and y digits 3, then the sum of the digits in the number increased by x∗2+y∗6. If new sum is divisible by 9, the answer is "YES". If such a situation was never reached during the iteration, then the answer is "NO". Кодdef solve():
    s = [int(x) for x in list(input())]

    sm = sum(s)
    twos = s.count(2)
    threes = s.count(3)

    for i in range(min(10, twos + 1)):
        for j in range(min(10, threes + 1)):
            if (sm + i * 2 + j * 6) % 9 == 0:
                print('YES')
                return
    print('NO')


t = int(input())
for _ in range(t):
    solve()