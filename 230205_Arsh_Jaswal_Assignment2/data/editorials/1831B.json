{
    "solution": "1831B — Array MergingAuthor: tibinyte2006 HintsHint 1When we merge two arrays a and b, we can force the resulting array to have [al1,al1+1,…,ar1,bl2,bl2+1,…,br1] as a subarray, for some 1≤l1≤r1≤n and 1≤l2≤r2≤n. Hint 2If al1=bl1, then we can achieve a contiguous sequence of (r1−l1+1)+(r2−l2+1) equal elements in the resulting array. SolutionLet maxa(x) be the length of the longest subarray from a containing only elements equal to x. If x doesn't appear in a, then maxa(x)=0.Similarly, let maxb(x) be the length of the longest subarray from b containing only elements equal to x. If x doesn't appear in b, then maxb(x)=0.maxa and maxb can be computed in O(N) by scanning the array while updating current maximal subarray.When merging two arrays, it is possible to force a particular subarray [al1,al1+1,…,ar1] to be adjacent to another particular subarray [bl2,bl2+1,…,br2] in the merged array. ProofWe can construct the merged array as follows:  [a1,a2,…,al1−1]+[b1,b2,…,bl2−1]+[al1,al1+1,…,ar1,bl2,bl2+1,…,br2]+[…]If al1=bl2, then the merged array will have a subarray consisting of (r1−l1+1)+(r2−l2+1) equal elements.Therefore, the answer is equal to:  max2⋅ni=1(maxa(i)+maxb(i))Time complexity per testcase: O(N). Code (tibinyte, C++)#include <bits/stdc++.h>\n\nusing namespace std;\n\nint32_t main()\n{\n    cin.tie(nullptr)->sync_with_stdio(false);\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        int n;\n        cin >> n;\n        vector<int> a(n + 1);\n        vector<int> b(n + 1);\n        for (int i = 1; i <= n; ++i)\n        {\n            cin >> a[i];\n        }\n        for (int i = 1; i <= n; ++i)\n        {\n            cin >> b[i];\n        }\n        vector<int> fa(n + n + 1);\n        vector<int> fb(n + n + 1);\n        int p = 1;\n        for (int i = 2; i <= n; ++i)\n        {\n            if (a[i] != a[i - 1])\n            {\n                fa[a[i - 1]] = max(fa[a[i - 1]], i - p);\n                p = i;\n            }\n        }\n        fa[a[n]] = max(fa[a[n]], n - p + 1);\n\n        p = 1;\n        for (int i = 2; i <= n; ++i)\n        {\n            if (b[i] != b[i - 1])\n            {\n                fb[b[i - 1]] = max(fb[b[i - 1]], i - p);\n                p = i;\n            }\n        }\n        fb[b[n]] = max(fb[b[n]], n - p + 1);\n\n        int ans = 0;\n        for (int i = 1; i <= n + n; ++i)\n        {\n            ans = max(ans, fa[i] + fb[i]);\n        }\n\n        cout << ans << '\\n';\n    }\n}\n Rate problemGood problem \n\n    \n\n\n654\n\n\n\nOk problem \n\n    \n\n\n114\n\n\n\nBad problem \n\n    \n\n\n97\n\n\n\nDidn't solve it, idk \n\n    \n\n\n62\n\n\n\n"
}