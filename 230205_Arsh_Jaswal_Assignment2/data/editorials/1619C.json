{
    "solution": "1619C - Wrong AdditionLet's compute the answer to the array b, where bk is the digit at the k position in the number we are looking for. Let i be the position of the last digit in number a, j be the position of the last digit in number s. Then denote x=ai, y=sj, and consider the cases:   if x≤y, then the sum of ai+bi was exactly si, then bi=y−x.  if x>y, then the sum ai+bi was greater than 9 and we need to look at the next digit of the number s. If there isn't one, we can't get the answer — we'll output -1. Otherwise we recalculate y=10⋅sj−1+sj and reduce j by one.  if now y≥10 and y≤18, then bi=y−x. Otherwise, we deduce -1, since we cannot get more than 9+9=18 when adding two digits, and the cases where ai+bi<10 have already been considered before.  After considering the cases, reduce i and j by one and repeat the checks as long as i>0 or j>0. In the situation where j=0, but i>0, we will still have uncheked digits of number a, so we will also output -1. Otherwise, we output an array with the answer without leading zeros. Solution#include<bits/stdc++.h>\n#define len(s) (int)s.size()\nusing namespace std;\nusing ll = long long;\n \nvoid solve(){\n    ll a, s;\n    cin >> a >> s;\n    vector<int>b;\n    while(s){\n        int x = a % 10;\n        int y = s % 10;\n        if(x <= y) b.emplace_back(y - x);\n        else{\n            s /= 10;\n            y += 10 * (s % 10);\n            if(x < y && y >= 10 && y <= 19) b.emplace_back(y - x);\n            else{\n                cout << -1 << '\\n';\n                return;\n            }\n        }\n        a /= 10;\n        s /= 10;\n    }\n    if(a) cout << -1 << '\\n';\n    else{\n        while (b.back() == 0) b.pop_back();\n        for(int i = len(b) - 1; i >= 0; i--) cout << b[i];\n        cout << '\\n';\n    }\n}\n \nint main(){\n    ios_base ::sync_with_stdio(false);\n    cin.tie(nullptr);\n \n    int t;\n    cin >> t;\n    while (t){\n        solve();\n        t--;\n    }\n    return 0;\n}"
}