{
    "solution": "1985E - Secret BoxProblem Credits: cry  Analysis: cry SolutionSince the side lengths of S has to multiply to k, all three side lengths of S has to be divisors of k. Let's denote the side lengths of S along the x, y, and z axes as a, b, and c respectively. For S to fit in B , a≤x, b≤y, and c≤z must hold. Because of the low constraints, we can afford to loop through all possible values of a and b, and deduce that c=ka⋅b (make sure c≤z and c is an integer). To get the amount of ways we can place S, we can just multiply the amount of shifting space along each axes, and that just comes down to (x−a+1)⋅(y−b+1)⋅(z−c+1). The answer is the maximum among all possible values of a, b, and c . The time complexity is O(n2) where n is at most 2000. Code (C++)#include <iostream>\nusing namespace std;\nusing ll = long long;\n\nint main(){\n\tint t; cin >> t;\n\twhile(t--){\n\t\tll x, y, z, k; cin >> x >> y >> z >> k;\n\t\tll ans = 0;\n\t\tfor(int a = 1; a <= x; a++){\n\t\t\tfor(int b = 1; b <= y; b++){\n\t\t\t\tif(k % (a * b)) continue;\n\t\t\t\tll c = k / (a * b);\n\t\t\t\tif(c > z) continue;\n\t\t\t\tll ways = (ll)(x - a + 1) * (y - b + 1) * (z - c + 1);\n\t\t\t\tans = max(ans, ways);\n\t\t\t}\n\t\t}\n\t\tcout << ans << \"\\n\";\n\t}\n}"
}