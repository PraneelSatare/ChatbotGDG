{
    "solution": "1760E - Binary InversionsLet's find out how to count the number of binary inversions, without flips. This is the number of 1s that appear before a 0. To do this, iterate through the array and keep a running total k of the number of 1s seen so far. When we see a 0, increase the total inversion count by k, since this 0 makes k inversions: one for each of the 1s before it.Now let's see how to maximize the inversions. Consider the flip 0â†’1. We claim that it is best to always flip the earliest 0 in the array. It's never optimal to flip a later 0, since we have strictly fewer 0s after it to form inversions. Similarly, we should flip the latest 1 in the array.Now recalculate the answer for these two choices for flipping, and pick the maximum. The complexity is O(n). Solution#include \"bits/stdc++.h\"\nusing namespace std;\n \nusing ll = long long;\n \n#define       forn(i,n)              for(int i=0;i<n;i++)\n#define          all(v)              v.begin(), v.end()\n#define         rall(v)              v.rbegin(),v.rend()\n \n#define            pb                push_back\n#define          sz(a)               (int)a.size()\n\nll calc(vector<int>& a) {\n    ll zeroes = 0, ans = 0;\n    for(int i = sz(a) - 1; i >= 0; --i) {\n        if(a[i] == 0) ++zeroes;\n        else ans += zeroes;\n    }\n    return ans;\n}\nvoid solve() {\n    int n; cin >> n;\n    vector<int> a(n);\n    forn(i, n) cin >> a[i];\n    ll ans = calc(a);\n    forn(i, n) {\n        if(a[i] == 0) {\n            a[i] = 1;\n            ans = max(ans, calc(a));\n            a[i] = 0;\n            break;\n        }\n    }\n    for(int i = n - 1; i >= 0; --i) {\n        if(a[i] == 1) {\n            a[i] = 0;\n            ans = max(ans, calc(a));\n            a[i] = 1;\n            break;\n        }\n    }\n    cout << ans << \"\\n\";\n}   \n \nint32_t main() {\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    int t = 1;\n    cin >> t;\n    while(t--) {\n        solve();\n    }\n}"
}