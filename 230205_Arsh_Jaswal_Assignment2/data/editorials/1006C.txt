1006C - Three Parts of the ArraySince the given array consists of positive integers, for each value of a, there can be at most one value of c such that sum1=sum3. We can use binary search on the array of prefix sums of d to find the correct value of c, given that it exists. If it does exist and a+c≤n, this is a candidate solution so we store it. Alternatively, we can use the two pointers trick – when a increases, c cannot decrease. Be careful to use 64 bit integers to store sums.Overall complexity is O(nlogn) or O(n).  Solution (Vovuh, set)#include <bits/stdc++.h>

using namespace std;

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
#endif
	
	int n;
	cin >> n;
	vector<int> a(n);
	for (int i = 0; i < n; ++i)
		cin >> a[i];
		
	set<long long> sum;
	long long l = 0;
	for (int i = 0; i < n; ++i) {
		l += a[i];
		sum.insert(l);
	}
	
	long long ans = 0;
	long long r = 0;
	for (int i = n - 1; i >= 0; --i) {
		sum.erase(l);
		l -= a[i];
		r += a[i];
		if (sum.count(r))
			ans = max(ans, r);
	}
	
	cout << ans << endl;
	
	return 0;
} Solution (ivan100sic, two pointers)#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

int n;
int a[200005];

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cerr.tie(nullptr);

	cin >> n;
	for (int i=1; i<=n; i++)
		cin >> a[i];

	int i = 0, j = n+1;
	ll zi = 0, zj = 0, solidx = 0;
	while (i < j) {
		if (zi < zj)
			zi += a[++i];
		else if (zi > zj)
			zj += a[--j];
		else {
			solidx = i;
			zi += a[++i];
			zj += a[--j];
		}
	}
	
	cout << accumulate(a+1, a+solidx+1, 0ll); // here
}