{
    "solution": "1920B - Summation Game Hint 1What is the optimal strategy for Bob? Hint 2It is optimal for Bob to negate the x largest elements of the array. So what should Alice do? SolutionIt is optimal for Bob to negate the x largest elements of the array. So in order to minimize the damage Bob will do, Alice should always remove some number of largest elements. To solve the problem, we can sort the array and iterate over i (0≤i≤k) where i is the number of elements Alice removes. For each i, we know that Alice will remove the i largest elements of the array and Bob will then negate the x largest remaining elements. So the sum at the end can be calculated quickly with prefix sums. The time complexity is O(nlogn) because of sorting. Code#include <bits/stdc++.h>\nusing namespace std; \n\nvoid solve(){\n    int n, k, x;\n    cin >> n >> k >> x;\n    \n    int A[n + 1] = {};\n    for (int i = 1; i <= n; i++)\n        cin >> A[i];\n    \n    sort(A + 1, A + n + 1, greater<int>());\n\n    for (int i = 1; i <= n; i++)\n        A[i] += A[i - 1];\n    \n    int ans = -1e9;\n    for (int i = 0; i <= k; i++)\n        ans = max(ans, A[n] - 2 * A[min(i + x, n)] + A[i]);\n    \n    cout<<ans<<\"\\n\";\n}\n\nint main(){\n    ios_base::sync_with_stdio(0); cin.tie(0); \n    int tc; \n    cin >> tc;\n    \n    while (tc--) \n        solve();\n}"
}