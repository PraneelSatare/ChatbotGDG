{
    "solution": "1736B - Playing with GCD SolutionTake a0=an+1=1.Now take bi=lcm(ai−1,ai) for 1≤i≤n+1. If b gives us a after performing the gcd operations, then the answer is YES, otherwise the answer is NO. (When answer is NO, we would get a case like gcd(bi,bi+1)=k⋅ai(where k>1 for some i).Suppose c is some valid array which gives us a. So, ci should be divisible by bi. This means gcd(ci,ci+1)≥gcd(bi,bi+1).So, if gcd(bi,bi+1)>ai for any i, we should also have gcd(ci,ci+1)>ai. This implies that c is not valid if b is not valid.Time complexity is O(n⋅log(bmax)). Code#include <bits/stdc++.h>     \nusing namespace std;\n#define ll long long\nll lcm(ll a,ll b){\n    ll g=__gcd(a,b);\n    return (a*b/g);\n}\nvoid solve(){\n    ll n; cin>>n;\n    vector<ll> a(n+2,1);\n    for(ll i=1;i<=n;i++){\n        cin>>a[i];\n    }\n    vector<ll> b(n+2,1);\n    for(ll i=1;i<=n+1;i++){\n        b[i]=lcm(a[i],a[i-1]);\n    }\n    for(ll i=1;i<=n;i++){\n        if(__gcd(b[i],b[i+1])!=a[i]){\n            cout<<\"NO\\n\";\n            return;\n        }\n    }\n    cout<<\"YES\\n\";\n}\nint main()                                                                                \n{  \n    ios_base::sync_with_stdio(false);                         \n    cin.tie(NULL);  \n    ll t; cin>>t;\n    while(t--){\n        solve();\n    }\n}  "
}