1873E - Building an AquariumWe need to find the maximum height with a certain upper bound — this is a tell-tale sign of binary search. If you don't know what that is, you should read this Codeforces EDU article.For a given value of h, in the i-th column we will need h−ai units of water if h≥ai, or 0 units otherwise. (This is equal to max(h−ai,0), why?) So we can compute the amount of water for all n columns by simply iterating through and summing the total amount of water needed for each column, and see if it's not larger than x.Then you can binary search on the optimal value of h. The model solution uses the starting bounds l=0, r=2ai+ε, because the optimal height could be ai+x. So the complexity is O(nlogai) per testcase. Solution#include <bits/stdc++.h>
 
using namespace std;
 
const int MAX = 200'007;
const int MOD = 1'000'000'007;
 
void solve() {
	int n;
	long long x;
	cin >> n >> x;
	long long a[n];
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
	long long lo = 0, hi = 2'000'000'007;
	while (lo < hi) {
		long long mid = lo + (hi - lo + 1) / 2;
		long long tot = 0;
		for (int i = 0; i < n; i++) {
			tot += max(mid - a[i], 0LL);
		}
		if (tot <= x) {lo = mid;} 
		else {hi = mid - 1;}
	}
	cout << lo << endl;
}
 
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	int tt; cin >> tt; for (int i = 1; i <= tt; i++) {solve();}
	// solve();
}

