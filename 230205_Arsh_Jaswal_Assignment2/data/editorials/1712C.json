{
    "solution": "1712C - Sort ZeroAn array is sorted in non-decreasing order if and only if there is no index i such that ai>ai+1. This leads to a strategy: while there is at least one such index i, apply one operation with x=ai.Why is this optimal? Since our operation can only decrease values, and we must decrease ai so that ai>ai+1 is no longer true, this leaves us no choice but to use the operation with x=ai.You can simulate this strategy by maintaining a set of bad indices, since if an index i becomes bad, after you apply an operation with x=ai, it can never become bad again. So in total, there are at most 2⋅(n−1) operations with the set.Complexity: O(nlogn) or O(n), depending on which set you use.Note: you can solve the problem in O(n) by noticing that if an index i is bad, we need to apply the operation for all unique non-zero values in {a1…ai}. This is also quite a bit shorter to code. Solution#include <bits/stdc++.h>\n \n#define all(x) (x).begin(), (x).end()\n#define allr(x) (x).rbegin(), (x).rend()\n#define gsize(x) (int)((x).size())\n \nconst char nl = '\\n';\ntypedef long long ll;\ntypedef long double ld;\n \nusing namespace std;\n \nint main() {\n\tios::sync_with_stdio(0); cin.tie(0);\n\t\n\tint T;\n\tcin >> T;\n\twhile (T--) {\n\t\tint n;\n\t\tcin >> n;\n\t\t\n\t\tvector<int> a(n);\n\t\tmap<int, vector<int>> p;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcin >> a[i];\n\t\t\tp[a[i]].push_back(i);\n\t\t}\n\t\t\n\t\tint ans = 0;\n\t\tset<int> ts;\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tif (a[i] > a[i + 1]) ts.insert(i);\n\t\t}\n\t\t\n\t\twhile (!ts.empty()) {\n\t\t\tint i = *ts.begin();\n\t\t\tint x;\n\t\t\tif (a[i] > 0) {\n\t\t\t\tx = a[i];\n\t\t\t} else {\n\t\t\t\tx = a[i + 1];\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j: p[x]) {\n\t\t\t\ta[j] = 0;\n\t\t\t\tts.erase(j - 1);\n\t\t\t\tts.erase(j);\n\t\t\t\tif (j > 0 && a[j - 1] > a[j]) ts.insert(j - 1);\n\t\t\t\tif (j + 1 < n && a[j] > a[j + 1]) ts.insert(j);\n\t\t\t}\n\t\t\tans++;\n\t\t}\n\t\t\n\t\tcout << ans << nl;\n\t}\n}\nBonus: solve for when ai can also be negative."
}