{
    "solution": "1984B - Large AdditionProblem Credits: flamestorm Analysis: null_aweSolution 1 Hint 1What must the first (largest) digit be? Hint 2What must the other non-unit digits be? Hint 3What must the last digit be? SolutionBecause every digit is large, every two digits being added together will carry to the next digit. The two addends have the same length, so the sum must be one greater in length, with the largest digit equal to 1.For all other digits except for the units digit, we have the value to be the sum of two large digits, plus 1 being carried over from the previous column. This makes the acceptable range of values be from 1 to 9, inclusive.For the units digit, there is no previous column to carry over a 1, so the acceptable range of values is from 0 to 8, inclusive. Code (C++)#include <iostream>\nusing namespace std;\n \n#define ll long long\n \nvoid solve() {\n  ll n; cin >> n;\n  n = n - n % 10 + (n % 10 + 1) % 10;\n  while (n > 9) {\n    if (n % 10 == 0) {\n      cout << \"NO\\n\";\n      return;\n    }\n    n /= 10;\n  }\n  cout << (n == 1 ? \"YES\\n\" : \"NO\\n\");\n}\n \nint main() {\n  ios_base::sync_with_stdio(false); cin.tie(NULL);\n  int t; cin >> t;\n  for (int i = 0; i < t; ++i) solve();\n  return 0;\n}\n\n"
}