1619C - Wrong AdditionLet's compute the answer to the array b, where bk is the digit at the k position in the number we are looking for. Let i be the position of the last digit in number a, j be the position of the last digit in number s. Then denote x=ai, y=sj, and consider the cases:   if x≤y, then the sum of ai+bi was exactly si, then bi=y−x.  if x>y, then the sum ai+bi was greater than 9 and we need to look at the next digit of the number s. If there isn't one, we can't get the answer — we'll output -1. Otherwise we recalculate y=10⋅sj−1+sj and reduce j by one.  if now y≥10 and y≤18, then bi=y−x. Otherwise, we deduce -1, since we cannot get more than 9+9=18 when adding two digits, and the cases where ai+bi<10 have already been considered before.  After considering the cases, reduce i and j by one and repeat the checks as long as i>0 or j>0. In the situation where j=0, but i>0, we will still have uncheked digits of number a, so we will also output -1. Otherwise, we output an array with the answer without leading zeros. Solution#include<bits/stdc++.h>
#define len(s) (int)s.size()
using namespace std;
using ll = long long;
 
void solve(){
    ll a, s;
    cin >> a >> s;
    vector<int>b;
    while(s){
        int x = a % 10;
        int y = s % 10;
        if(x <= y) b.emplace_back(y - x);
        else{
            s /= 10;
            y += 10 * (s % 10);
            if(x < y && y >= 10 && y <= 19) b.emplace_back(y - x);
            else{
                cout << -1 << '\n';
                return;
            }
        }
        a /= 10;
        s /= 10;
    }
    if(a) cout << -1 << '\n';
    else{
        while (b.back() == 0) b.pop_back();
        for(int i = len(b) - 1; i >= 0; i--) cout << b[i];
        cout << '\n';
    }
}
 
int main(){
    ios_base ::sync_with_stdio(false);
    cin.tie(nullptr);
 
    int t;
    cin >> t;
    while (t){
        solve();
        t--;
    }
    return 0;
}