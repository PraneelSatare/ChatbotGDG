1409C - Yet Another Array RestorationThe only fact required to solve this problem is just to notice that the answer array is just an arithmetic progression. After that, we can fix the first element start, fix the difference d, construct the array [start,start+d,start+2d,…,start+d⋅(n−1)], check if x and y are in this array and, if yes, update the answer with start+d⋅(n−1). This is O(n3) solution.There are faster solutions, though. Other author's solution is O(ny√) but I didn't want to make this problem harder, so I allowed O(n3) solutions.It is obvious that the difference of the progression is some divisor of y−x. Let it be d. Let's add some elements starting from y "to the left" (y,y−d,y−2d and so on) and stop if we reach n elements or the next element is less than 1. If we didn't find x among these elements, just skip this difference, it is useless for us. Otherwise, if we have less than n elements, let's add y+d,y+2d,y+3d and so on until we get n elements. And then update the answer with the maximum element of the array.There is also a solution in O(n+y√) with some greedy observations :) Solution (Gassa)// Author: Ivan Kazmenko (gassa@mail.ru)
module solution;
import std.algorithm;
import std.conv;
import std.range;
import std.stdio;
import std.string;

void main ()
{
	auto tests = readln.strip.to !(int);
	foreach (test; 0..tests)
	{
		int n, x, y;
		readf !(" %s %s %s") (n, x, y);
		auto answer = int.max.repeat (n).array;
		foreach (start; 1..51)
		{
			foreach (d; 1..51)
			{
				auto a = iota (start, start + d * n, d).array;
				if (a.canFind (x) && a.canFind (y))
				{
					if (answer.back > a.back)
					{
						answer = a;
					}
				}
			}
		}
		writefln !("%(%s %)") (answer);
	}
} Solution (vovuh)#include <bits/stdc++.h>

using namespace std;

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
#endif
	
	int t;
	cin >> t;
	while (t--) {
		int n, x, y;
		cin >> n >> x >> y;
		vector<int> ans;
		for (int d = 1; d <= y - x; ++d) {
			if ((y - x) % d != 0) continue;
			vector<int> res;
			bool foundx = false;
			int cur = y;
			int need = n;
			while (cur >= 1 && need > 0) {
				res.push_back(cur);
				foundx |= cur == x;
				--need;
				cur -= d;
			}
			cur = y;
			while (need > 0) {
				cur += d;
				res.push_back(cur);
				--need;
			}
			sort(res.begin(), res.end());
			if (need == 0 && foundx) {
				if (ans.empty() || ans.back() > res.back()) {
					ans = res;
				}
			}
		}
		assert(!ans.empty());
		for (auto it : ans) cout << it << " ";
		cout << endl;
		
	}
	
	return 0;
} Solution (Rox)#include <bits/stdc++.h>

using namespace std;

int main() {
    int tcs;
    cin >> tcs;

    while (tcs--) {
        int n, x, y;
        cin >> n >> x >> y;
        int diff = y - x;
        for (int delta = 1; delta <= diff; ++delta) {
            if (diff % delta) continue;
            if (diff / delta + 1 > n) continue;
            int k = min((y - 1) / delta, n - 1);
            int a0 = y - k * delta;
            for (int i = 0; i < n; ++i) {
                cout << (a0 + i * delta) << ' ';
            }
            cout << endl;
            break;
        }
    }
}