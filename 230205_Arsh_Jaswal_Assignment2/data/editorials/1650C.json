{
    "solution": "1650C - Weight of the System of Nested SegmentsWe create a structure that stores for each point its coordinate, weight, and index in the input data. Sort the points array by increasing weight. The sum of weights of the first 2⋅n points will be minimal, so we use them to construct a system of n nested segments. We save the weights of the first 2⋅n points in the variable sum and remove the remaining m−2⋅n points from the array. Now sort the points in ascending order of coordinates and form a system of nested segments such that the endpoints of ith segment are points[i] and points[2⋅n−i+1] for (1≤i≤2⋅n). Thus, the endpoints of the first segment are points[1] and points[2⋅n], the endpoints of the nth segment are points[n] and points[n+1].For each test case we first output sum, then — n pairs of numbers i, j (1≤i,j≤m) — the indices under which the endpoints of the current segment were written in the input data. Solution#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nstruct point{\n    int weight, position, id;\n};\n\nvoid solve(){\n    int n, m;\n    cin >> n >> m;\n    vector<point>points(m);\n\n    forn(i, m) {\n        cin >>  points[i].position >> points[i].weight;\n        points[i].id = i + 1;\n    }\n\n    sort(points.begin(), points.end(), [] (point a, point b){\n        return a.weight < b.weight;\n    });\n\n    int sum = 0;\n    forn(i, m){\n        if(i < 2 * n) sum += points[i].weight;\n        else points.pop_back();\n    }\n\n    sort(points.begin(), points.end(), [] (point a, point b){\n        return a.position < b.position;\n    });\n\n    cout << sum << endl;\n    forn(i, n){\n        cout << points[i].id << ' ' << points[2 * n - i - 1].id << endl;\n    }\n}\n\nint main() {\n    int t;\n    cin >> t;\n    while(t--){\n        solve();\n    }\n    return 0;\n}"
}