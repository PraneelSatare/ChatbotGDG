Section 1:
Tutorial
2049C - MEX Cycle
There are many possible solutions. The simplest one we can find (thanks to
Kaey
) is as follows:
Set $$$a_x = 0, a_{x+1} = 1, a_{x+2} = 0, \ldots$$$, alternating between 0 and 1, wrapping around accordingly. Formally, using 0-based indexing, set $$$a_{(x+i) \bmod n} = i \bmod 2$$$ for all $$$i$$$ ($$$0 \le i \le n - 1$$$).
If $$$n$$$ is odd or if $$$x - y$$$ is even, set $$$a_x = 2$$$.
Why this works:
If $$$n$$$ is even and $$$x - y$$$ is odd, all $$$0$$$'s are only friends with $$$1$$$'s and vice versa.
If $$$n$$$ is odd, $$$a_x$$$ will be adjacent to $$$0$$$ and $$$1$$$, so we set $$$a_x = 2$$$. Now $$$a$$$ is valid ignoring the extra friendship. Adding in the extra friendship, $$$a$$$ is still valid since $$$a_x = 2 > a_y$$$, so it will not affect $$$a_y$$$.
If $$$n$$$ is even and $$$x - y$$$ is even, the extra friendship connects two $$$0$$$ or two $$$1$$$. Setting $$$a_x = 2$$$ works because dragon $$$x$$$'s friends still have another neighbor to maintain their $$$\operatorname{MEX}$$$.

Section 2:
Solution
#include <iostream>
#include <vector>
using namespace std;

void solve() {
    int n, x, y;
    cin >> n >> x >> y;
    --x; --y;
    vector<int> ans(n);
    for (int i = 0; i < n; ++i) ans[(x + i) % n] = i % 2;
    if (n % 2 || (x - y) % 2 == 0)
        ans[x] = 2;
    for (auto x : ans)cout << x << ' ';
    cout << endl;
}

int main() {
    int T;
    cin >> T;
    while (T--) solve();
}

