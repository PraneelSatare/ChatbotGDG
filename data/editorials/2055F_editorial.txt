Section 1:
Hint 1
The results of the partition must be convex. Can you see why?

Section 2:
Hint 2
The easier cases are when the polyomino must be cut vertically or horizontally. Let's discard those for now, and consider the "diagonal cuts". I.e. let one polyomino start from the top row, and another starting from some row $$$c$$$. WLOG the one starting on row $$$c$$$ is on the left side, we will check the other side by just duplicating the rest of the solution.

Section 3:
Hint 3
Both sub-polyominoes are fixed if you choose $$$c$$$. But, it takes $$$O(n)$$$ time to check each one.

Section 4:
Hint 4
Can you get rid of most $$$c$$$ with a quick check?

Section 5:
Hint 5
Look at perimeters shapes, or area. Both will work.

Section 6:
Solution
Assume there exists a valid partition of the polyomino. Note that the resulting congruent polyominoes must be convex, as it is not possible to join two non-overlapping non-convex polyominoes to create a convex one.
Then, there are two cases: either the two resulting polyominoes are separated by a perfectly vertical or horizontal cut, or they share some rows. The first case is easy to check in linear time. The remainder of the solution will focus on the second case.
Consider the structure of a valid partition. We will focus on the perimeter:
Notice that the cut separating the two polyominoes must only ever move down and right, or up and right, as otherwise one of the formed polyominoes will not be convex. Without loss of generality, say it only goes down and right.
In order for our cut to be valid, it must partition the perimeter into six segments as shown, such that the marked segments are congruent in the indicated orientations ($$$a$$$ with $$$a$$$, $$$b$$$ with $$$b$$$, $$$c$$$ with $$$c$$$.) If we label the horizontal lines of the grid to be $$$0, \dots, n$$$ where line $$$i$$$ is located after row $$$i$$$, we notice that the division points along the left side of the original polyomino are located at lines $$$0, k, 2k$$$ for some $$$1 \leq k \leq n/2$$$.
Notice that if we were to fix a given $$$k$$$, we can uniquely determine the lower polyomino from the first few rows of the upper polyomino. Indeed, if $$$a_i = r_i - \ell_i + 1$$$ denotes the width of the $$$i$$$-th row of the original polyomino, we can show that the resulting polyomino for a particular choice of $$$k$$$ has
$$$b_i = a_i - a_{i-k} + a_{i-2k} - \dots$$$
cells in its $$$i$$$-th row, for $$$1 \leq i \leq n - k$$$. Therefore, iterating over all possible $$$k$$$ and checking them individually gives an $$$O(n^2)$$$ solution.
To speed this up, we will develop a constant-time check that will prune ``most'' choices of $$$k$$$. Indeed, we may use prefix sums and hashing to verify the perimeter properties outlined above, so that we can find all $$$k$$$ that pass this check in $$$O(n)$$$ time. If there are at most $$$f(n)$$$ choices of $$$k$$$ afterwards, we can check them all for a solution in $$$O(n \cdot (f(n) + \text{hashing errors}))$$$.
It can actually be shown that for our hashing protocol, $$$f(n) \leq 9$$$, so that this algorithm has linear time complexity. While the proof is not difficult, it is rather long and will be left as an exercise. Instead, we will give a simpler argument to bound $$$f(n)$$$. Fix some choice of $$$k$$$, and consider the generating functions
$$$A(x) = a_0 + a_1 x + \dots + a_n x^n,$$$
$$$B(x) = b_0 + b_1 x + \dots + b_{n-k} x^{n-k}.$$$
The perimeter conditions imply that $$$(1 + x^k) B(x) = A(x)$$$. In other words, $$$k$$$ may only be valid if $$$(1 + x^k)$$$ divides $$$A(x)$$$. Therefore, we can use
cyclotomic polynomials
for $$$1 + x^k \mid x^{2k} - 1$$$ to determine that
$$$f(n) \leq \text{maximum number of cyclotomic polynomials that can divide a degree}\ n\ \text{polynomial}.$$$
As the degree of the $$$k$$$-th cyclotomic polynomial is $$$\phi(k)$$$ for the Euler totient function $$$\phi$$$, we can see that $$$f(n)$$$ is also at most the maximum number of $$$k_i \leq n$$$ we can select with $$$\sum_i \phi(k_i) \leq n$$$. Since $$$\phi(n) \geq \frac{n}{\log \log n}$$$, this tells us that
$$$f(n) = O(\sqrt n \cdot \log \log n)$$$
and this looser bound already yields a time complexity of at most $$$O(n \sqrt n \cdot \log \log n).$$$
While this concludes the official solution,
there exist many other heuristics with different $$$f(n)$$$ that also work.
It is in the spirit of the problem to admit many alternate heuristics that give small enough $$$f(n)$$$ ``in practice'', as the official solution uses hashing. One such heuristic found by testers is as follows:
We take as our pruning criteria that the area of the subdivided polyomino $$$\sum_{i=1}^{n-k} b_i$$$ is exactly half of the area of the original polyomino, which is $$$\sum_{i=1}^n a_i$$$. Algebraically manipulating $$$\sum_{i=1}^{n-k} b_i$$$ to be a linear function of $$$a_i$$$ shows it to be equal to
$$$(a_1 + \dots + a_k) - (a_{k+1} + \dots + a_{2k}) + \dots.$$$
The calculation of all these sums may be sped up with prefix sums, and therefore pruning of $$$k$$$, can be done in amortized $$$O(n \log n)$$$ time since any fixed choice of $$$k$$$ has $$$\frac nk$$$ segments.
However, for this choice of pruning, it can actually be shown that $$$f(n) \geq \Omega(d(n))$$$, where $$$d(n)$$$ is the number of divisors of $$$n$$$. This lower bound is obtained at an even-sized diamond polyomino, e.g.
$$$(a_1, \dots, a_n) = (2, 4, \dots, n, n, \dots, 4, 2).$$$
Despite our efforts, we could not find an upper bound on $$$f(n)$$$ in this case, though we suspect that if it were not for the integrality and bounding constraints $$$a_i \in {1, \dots, 10^9}$$$, then $$$f(n) = \Theta(n)$$$, with suitable choices of $$$a_i$$$ being found using linear programs. Nevertheless, the solution passes our tests, and we suspect that no countertest exists (though hacking attempts on such solutions would be interesting to see!).

Section 7:
Implementation
#include <bits/stdc++.h>

#define f first
#define s second

typedef long long int ll;
typedef unsigned long long int ull;
using namespace std;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

void print_set(vector<int> x) {
    for (auto i : x) {
        cout << i << " ";
    }
    cout << endl;
}

void print_set(vector<ll> x) {
    for (auto i : x) {
        cout << i << " ";
    }
    cout << endl;
}

bool connected(vector<ll> &U, vector<ll> &D) {
    if (U[0] > D[0]) return 0;
    for (int i = 1; i < U.size(); i++) {
        if (U[i] > D[i]) return 0;
        if (D[i] < U[i-1]) return 0;
        if (U[i] > D[i-1]) return 0;
    }
    return 1;
}

bool compare(vector<ll> &U1, vector<ll> &D1, vector<ll> &U2, vector<ll> &D2) {
    if (U1.size() != U2.size()) return 0;
    if (!connected(U1, D1)) return 0;
    for (int i = 0; i < U1.size(); i++) {
        if (U1[i] - D1[i] != U2[i] - D2[i]) return 0;
        if (U1[i] - U1[0] != U2[i] - U2[0]) return 0;
    }
    return 1;
}

bool horizontal_check(vector<ll>& U, vector<ll>& D) {
    if (U.size() % 2) return 0;
    int N = U.size() / 2;
    auto U1 = vector<ll>(U.begin(), U.begin() + N);
    auto D1 = vector<ll>(D.begin(), D.begin() + N);
    auto U2 = vector<ll>(U.begin() + N, U.end());
    auto D2 = vector<ll>(D.begin() + N, D.end());
    return compare(U1, D1, U2, D2);
}

bool vertical_check(vector<ll>& U, vector<ll>& D) {
    vector<ll> M1, M2;
    for (int i = 0; i < U.size(); i++) {
        if ((U[i] + D[i]) % 2 == 0) return 0;
        M1.push_back((U[i] + D[i]) / 2);
        M2.push_back((U[i] + D[i]) / 2 + 1);
    }
    return compare(U, M1, M2, D);
}

ll base = 2;
ll inv = 1000000006;
ll mod = 2000000011;

vector<ll> base_pows;
vector<ll> inv_pows;
void precompute_powers() {
    base_pows.push_back(1);
    inv_pows.push_back(1);
    for (int i = 1; i <= 300000; i++) {
        base_pows.push_back(base_pows.back() * base % mod);
        inv_pows.push_back(inv_pows.back() * inv % mod);
    }
}

ll sub(vector<ll> &hash_prefix, int a1, int b1) {
    return ((mod + hash_prefix[b1] - hash_prefix[a1]) * inv_pows[a1]) % mod;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    precompute_powers();

    int T; cin >> T;
    while (T--) {
        int N; cin >> N;
        vector<ll> U(N), D(N), H(N);
        vector<pii> col_UL(N), col_DR(N+1);
        vector<ll> hash_prefix_U(N), hash_prefix_D(N);
        for (int i = 0; i < N; i++) {
            cin >> U[i] >> D[i];
            H[i] = D[i] - U[i] + 1;
            col_UL[i] = {i,U[i]};
            col_DR[i] = {i+1,D[i]+1};
        }

        // hashing
        for (int i = 1; i < N; i++) {
            hash_prefix_U[i] = (((mod + U[i] - U[i-1]) * base_pows[i-1])
                                + hash_prefix_U[i-1]) % mod;
        }

        for (int i = 1; i < N; i++) {
            hash_prefix_D[i] = (((mod + D[i] - D[i-1]) * base_pows[i-1])
                                + hash_prefix_D[i-1]) % mod;
        }

        // horizontal split
        if (horizontal_check(U, D)) {
            cout << "YES" << endl;
            goto next;
        }

        // vertical split
        if (vertical_check(U, D)) {
            cout << "YES" << endl;
            goto next;
        }

        for (int _ = 0; _ < 2; _++) {
            // down-right split
            for (int c = 1; c <= N/2; c++) {
                // check upper portion
                if (sub(hash_prefix_U, 0, c-1) != sub(hash_prefix_U, c, 2*c-1)) continue;
                if (H[0] - U[2*c] + U[2*c-1] != U[c-1] - U[c]) continue;

                // check lower portion
                if (sub(hash_prefix_D, N-c, N-1) != sub(hash_prefix_D, N-2*c, N-c-1)) continue;
                if (H[N-1] + D[N-2*c-1] - D[N-2*c] != D[N-c-1] - D[N-c]) continue;

                // check main portion
                if (sub(hash_prefix_U, 2*c, N-1) != sub(hash_prefix_D, 0, N-2*c-1)) continue;

                // brute force section
                // polynomial division
                bool ok = 1;
                vector<ll> H_copy(H.begin(), H.end());
                vector<ll> quotient(N);

                // calculate quotient
                for (int i = 0; i < N-c; i++) {
                    quotient[i] = H_copy[i];
                    H_copy[i+c] -= H_copy[i];
                    if (quotient[i] < 0) ok = 0;
                }

                // check for no remainder
                for (int i = N-c; i < N; i++) if (H_copy[i]) ok = 0;
                if (!ok) continue;

                // construct subdivision
                vector<ll> U1, D1, U2, D2;
                for (int i = c; i < N; i++) {
                    int ref_height = quotient[i-c];
                    U1.push_back(D[i-c] - ref_height + 1);
                    D1.push_back(D[i-c]);
                    U2.push_back(U[i]);
                    D2.push_back(U[i] + ref_height - 1);
                }

                if (compare(U1, D1, U2, D2)) {
                    cout << "YES" << endl;
                    goto next;
                }
            }

            // flip and go again!
            swap(hash_prefix_U, hash_prefix_D);
            swap(U, D);
            for (int i = 0; i < N; i++) {
                U[i] = -U[i];
                D[i] = -D[i];
            }
        }
        cout << "NO" << endl;
        next:;
    }
    return 0;
}

